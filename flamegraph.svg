<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="709.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="3152662097"><g><title>core::slice::&lt;impl [T]&gt;::first (13,800,063 samples, 0.44%)</title><rect x="2.1629%" y="533" width="0.4377%" height="15" fill="rgb(227,0,7)" fg:x="68188601" fg:w="13800063"/><text x="2.4129%" y="543.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (7,013,444 samples, 0.22%)</title><rect x="2.8627%" y="485" width="0.2225%" height="15" fill="rgb(217,0,24)" fg:x="90252101" fg:w="7013444"/><text x="3.1127%" y="495.50"></text></g><g><title>kukka::char::{{closure}} (40,319,969 samples, 1.28%)</title><rect x="1.9799%" y="549" width="1.2789%" height="15" fill="rgb(221,193,54)" fg:x="62419957" fg:w="40319969"/><text x="2.2299%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (20,751,262 samples, 0.66%)</title><rect x="2.6006%" y="533" width="0.6582%" height="15" fill="rgb(248,212,6)" fg:x="81988664" fg:w="20751262"/><text x="2.8506%" y="543.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (20,751,262 samples, 0.66%)</title><rect x="2.6006%" y="517" width="0.6582%" height="15" fill="rgb(208,68,35)" fg:x="81988664" fg:w="20751262"/><text x="2.8506%" y="527.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (20,751,262 samples, 0.66%)</title><rect x="2.6006%" y="501" width="0.6582%" height="15" fill="rgb(232,128,0)" fg:x="81988664" fg:w="20751262"/><text x="2.8506%" y="511.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (5,474,381 samples, 0.17%)</title><rect x="3.0852%" y="485" width="0.1736%" height="15" fill="rgb(207,160,47)" fg:x="97265545" fg:w="5474381"/><text x="3.3352%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (5,474,381 samples, 0.17%)</title><rect x="3.0852%" y="469" width="0.1736%" height="15" fill="rgb(228,23,34)" fg:x="97265545" fg:w="5474381"/><text x="3.3352%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5,474,381 samples, 0.17%)</title><rect x="3.0852%" y="453" width="0.1736%" height="15" fill="rgb(218,30,26)" fg:x="97265545" fg:w="5474381"/><text x="3.3352%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,744,131 samples, 0.09%)</title><rect x="4.2243%" y="533" width="0.0870%" height="15" fill="rgb(220,122,19)" fg:x="133176982" fg:w="2744131"/><text x="4.4743%" y="543.50"></text></g><g><title>core::ops::function::Fn::call (95,821,886 samples, 3.04%)</title><rect x="1.7953%" y="629" width="3.0394%" height="15" fill="rgb(250,228,42)" fg:x="56599814" fg:w="95821886"/><text x="2.0453%" y="639.50">cor..</text></g><g><title>json::parse_string_inner (95,821,886 samples, 3.04%)</title><rect x="1.7953%" y="613" width="3.0394%" height="15" fill="rgb(240,193,28)" fg:x="56599814" fg:w="95821886"/><text x="2.0453%" y="623.50">jso..</text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (95,821,886 samples, 3.04%)</title><rect x="1.7953%" y="597" width="3.0394%" height="15" fill="rgb(216,20,37)" fg:x="56599814" fg:w="95821886"/><text x="2.0453%" y="607.50">&lt;F ..</text></g><g><title>kukka::delimited::{{closure}} (95,821,886 samples, 3.04%)</title><rect x="1.7953%" y="581" width="3.0394%" height="15" fill="rgb(206,188,39)" fg:x="56599814" fg:w="95821886"/><text x="2.0453%" y="591.50">kuk..</text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (90,001,743 samples, 2.85%)</title><rect x="1.9799%" y="565" width="2.8548%" height="15" fill="rgb(217,207,13)" fg:x="62419957" fg:w="90001743"/><text x="2.2299%" y="575.50">&lt;F..</text></g><g><title>kukka::take_while::{{closure}} (49,681,774 samples, 1.58%)</title><rect x="3.2588%" y="549" width="1.5759%" height="15" fill="rgb(231,73,38)" fg:x="102739926" fg:w="49681774"/><text x="3.5088%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (16,500,587 samples, 0.52%)</title><rect x="4.3113%" y="533" width="0.5234%" height="15" fill="rgb(225,20,46)" fg:x="135921113" fg:w="16500587"/><text x="4.5613%" y="543.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (16,500,587 samples, 0.52%)</title><rect x="4.3113%" y="517" width="0.5234%" height="15" fill="rgb(210,31,41)" fg:x="135921113" fg:w="16500587"/><text x="4.5613%" y="527.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (16,500,587 samples, 0.52%)</title><rect x="4.3113%" y="501" width="0.5234%" height="15" fill="rgb(221,200,47)" fg:x="135921113" fg:w="16500587"/><text x="4.5613%" y="511.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (8,248,052 samples, 0.26%)</title><rect x="4.5731%" y="485" width="0.2616%" height="15" fill="rgb(226,26,5)" fg:x="144173648" fg:w="8248052"/><text x="4.8231%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::first (10,943,956 samples, 0.35%)</title><rect x="5.0973%" y="581" width="0.3471%" height="15" fill="rgb(249,33,26)" fg:x="160700019" fg:w="10943956"/><text x="5.3473%" y="591.50"></text></g><g><title>kukka::char::{{closure}} (21,984,701 samples, 0.70%)</title><rect x="5.0973%" y="597" width="0.6973%" height="15" fill="rgb(235,183,28)" fg:x="160700019" fg:w="21984701"/><text x="5.3473%" y="607.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (11,040,745 samples, 0.35%)</title><rect x="5.4444%" y="581" width="0.3502%" height="15" fill="rgb(221,5,38)" fg:x="171643975" fg:w="11040745"/><text x="5.6944%" y="591.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (11,040,745 samples, 0.35%)</title><rect x="5.4444%" y="565" width="0.3502%" height="15" fill="rgb(247,18,42)" fg:x="171643975" fg:w="11040745"/><text x="5.6944%" y="575.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (11,040,745 samples, 0.35%)</title><rect x="5.4444%" y="549" width="0.3502%" height="15" fill="rgb(241,131,45)" fg:x="171643975" fg:w="11040745"/><text x="5.6944%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (11,040,745 samples, 0.35%)</title><rect x="5.4444%" y="533" width="0.3502%" height="15" fill="rgb(249,31,29)" fg:x="171643975" fg:w="11040745"/><text x="5.6944%" y="543.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (11,040,745 samples, 0.35%)</title><rect x="5.4444%" y="517" width="0.3502%" height="15" fill="rgb(225,111,53)" fg:x="171643975" fg:w="11040745"/><text x="5.6944%" y="527.50"></text></g><g><title>core::ops::function::Fn::call (2,732,696 samples, 0.09%)</title><rect x="5.7946%" y="565" width="0.0867%" height="15" fill="rgb(238,160,17)" fg:x="182684720" fg:w="2732696"/><text x="6.0446%" y="575.50"></text></g><g><title>json::parse_json (2,732,696 samples, 0.09%)</title><rect x="5.7946%" y="549" width="0.0867%" height="15" fill="rgb(214,148,48)" fg:x="182684720" fg:w="2732696"/><text x="6.0446%" y="559.50"></text></g><g><title>[unknown] (2,768,895 samples, 0.09%)</title><rect x="8.1487%" y="549" width="0.0878%" height="15" fill="rgb(232,36,49)" fg:x="256899986" fg:w="2768895"/><text x="8.3987%" y="559.50"></text></g><g><title>[unknown] (2,768,895 samples, 0.09%)</title><rect x="8.1487%" y="533" width="0.0878%" height="15" fill="rgb(209,103,24)" fg:x="256899986" fg:w="2768895"/><text x="8.3987%" y="543.50"></text></g><g><title>[unknown] (2,768,895 samples, 0.09%)</title><rect x="8.1487%" y="517" width="0.0878%" height="15" fill="rgb(229,88,8)" fg:x="256899986" fg:w="2768895"/><text x="8.3987%" y="527.50"></text></g><g><title>[unknown] (2,768,895 samples, 0.09%)</title><rect x="8.1487%" y="501" width="0.0878%" height="15" fill="rgb(213,181,19)" fg:x="256899986" fg:w="2768895"/><text x="8.3987%" y="511.50"></text></g><g><title>[unknown] (2,768,895 samples, 0.09%)</title><rect x="8.1487%" y="485" width="0.0878%" height="15" fill="rgb(254,191,54)" fg:x="256899986" fg:w="2768895"/><text x="8.3987%" y="495.50"></text></g><g><title>[unknown] (2,768,895 samples, 0.09%)</title><rect x="8.1487%" y="469" width="0.0878%" height="15" fill="rgb(241,83,37)" fg:x="256899986" fg:w="2768895"/><text x="8.3987%" y="479.50"></text></g><g><title>[unknown] (2,768,895 samples, 0.09%)</title><rect x="8.1487%" y="453" width="0.0878%" height="15" fill="rgb(233,36,39)" fg:x="256899986" fg:w="2768895"/><text x="8.3987%" y="463.50"></text></g><g><title>[unknown] (2,768,895 samples, 0.09%)</title><rect x="8.1487%" y="437" width="0.0878%" height="15" fill="rgb(226,3,54)" fg:x="256899986" fg:w="2768895"/><text x="8.3987%" y="447.50"></text></g><g><title>[unknown] (2,768,895 samples, 0.09%)</title><rect x="8.1487%" y="421" width="0.0878%" height="15" fill="rgb(245,192,40)" fg:x="256899986" fg:w="2768895"/><text x="8.3987%" y="431.50"></text></g><g><title>[unknown] (2,768,895 samples, 0.09%)</title><rect x="8.1487%" y="405" width="0.0878%" height="15" fill="rgb(238,167,29)" fg:x="256899986" fg:w="2768895"/><text x="8.3987%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (2,746,393 samples, 0.09%)</title><rect x="8.9348%" y="501" width="0.0871%" height="15" fill="rgb(232,182,51)" fg:x="281682548" fg:w="2746393"/><text x="9.1848%" y="511.50"></text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (104,473,556 samples, 3.31%)</title><rect x="5.7946%" y="581" width="3.3138%" height="15" fill="rgb(231,60,39)" fg:x="182684720" fg:w="104473556"/><text x="6.0446%" y="591.50">&lt;F ..</text></g><g><title>kukka::multispace0::{{closure}} (101,740,860 samples, 3.23%)</title><rect x="5.8813%" y="565" width="3.2271%" height="15" fill="rgb(208,69,12)" fg:x="185417416" fg:w="101740860"/><text x="6.1313%" y="575.50">kuk..</text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (27,489,395 samples, 0.87%)</title><rect x="8.2365%" y="549" width="0.8719%" height="15" fill="rgb(235,93,37)" fg:x="259668881" fg:w="27489395"/><text x="8.4865%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (27,489,395 samples, 0.87%)</title><rect x="8.2365%" y="533" width="0.8719%" height="15" fill="rgb(213,116,39)" fg:x="259668881" fg:w="27489395"/><text x="8.4865%" y="543.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (27,489,395 samples, 0.87%)</title><rect x="8.2365%" y="517" width="0.8719%" height="15" fill="rgb(222,207,29)" fg:x="259668881" fg:w="27489395"/><text x="8.4865%" y="527.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (2,729,335 samples, 0.09%)</title><rect x="9.0219%" y="501" width="0.0866%" height="15" fill="rgb(206,96,30)" fg:x="284428941" fg:w="2729335"/><text x="9.2719%" y="511.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (2,729,335 samples, 0.09%)</title><rect x="9.0219%" y="485" width="0.0866%" height="15" fill="rgb(218,138,4)" fg:x="284428941" fg:w="2729335"/><text x="9.2719%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2,729,335 samples, 0.09%)</title><rect x="9.0219%" y="469" width="0.0866%" height="15" fill="rgb(250,191,14)" fg:x="284428941" fg:w="2729335"/><text x="9.2719%" y="479.50"></text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (156,660,852 samples, 4.97%)</title><rect x="5.0973%" y="613" width="4.9692%" height="15" fill="rgb(239,60,40)" fg:x="160700019" fg:w="156660852"/><text x="5.3473%" y="623.50">&lt;F as ..</text></g><g><title>kukka::delimited::{{closure}} (134,676,151 samples, 4.27%)</title><rect x="5.7946%" y="597" width="4.2718%" height="15" fill="rgb(206,27,48)" fg:x="182684720" fg:w="134676151"/><text x="6.0446%" y="607.50">kukka..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (30,202,595 samples, 0.96%)</title><rect x="9.1084%" y="581" width="0.9580%" height="15" fill="rgb(225,35,8)" fg:x="287158276" fg:w="30202595"/><text x="9.3584%" y="591.50"></text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (317,360,872 samples, 10.07%)</title><rect x="0.0000%" y="645" width="10.0664%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="317360872"/><text x="0.2500%" y="655.50">&lt;F as kukka::Pa..</text></g><g><title>kukka::separated_pair::{{closure}} (164,939,172 samples, 5.23%)</title><rect x="4.8347%" y="629" width="5.2317%" height="15" fill="rgb(247,123,22)" fg:x="152421700" fg:w="164939172"/><text x="5.0847%" y="639.50">kukka:..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2,746,876 samples, 0.09%)</title><rect x="11.0231%" y="629" width="0.0871%" height="15" fill="rgb(231,138,38)" fg:x="347519538" fg:w="2746876"/><text x="11.2731%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (43,950,195 samples, 1.39%)</title><rect x="10.0664%" y="645" width="1.3941%" height="15" fill="rgb(231,145,46)" fg:x="317360872" fg:w="43950195"/><text x="10.3164%" y="655.50"></text></g><g><title>core::hash::sip::u8to64_le (11,044,653 samples, 0.35%)</title><rect x="11.1102%" y="629" width="0.3503%" height="15" fill="rgb(251,118,11)" fg:x="350266414" fg:w="11044653"/><text x="11.3602%" y="639.50"></text></g><g><title>[json] (4,608,398 samples, 0.15%)</title><rect x="11.4605%" y="645" width="0.1462%" height="15" fill="rgb(217,147,25)" fg:x="361311067" fg:w="4608398"/><text x="11.7105%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,608,398 samples, 0.15%)</title><rect x="11.4605%" y="629" width="0.1462%" height="15" fill="rgb(247,81,37)" fg:x="361311067" fg:w="4608398"/><text x="11.7105%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (4,608,398 samples, 0.15%)</title><rect x="11.4605%" y="613" width="0.1462%" height="15" fill="rgb(209,12,38)" fg:x="361311067" fg:w="4608398"/><text x="11.7105%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_empty_singleton (4,608,398 samples, 0.15%)</title><rect x="11.4605%" y="597" width="0.1462%" height="15" fill="rgb(227,1,9)" fg:x="361311067" fg:w="4608398"/><text x="11.7105%" y="607.50"></text></g><g><title>[libc.so.6] (55,881,349 samples, 1.77%)</title><rect x="11.6080%" y="645" width="1.7725%" height="15" fill="rgb(248,47,43)" fg:x="365960761" fg:w="55881349"/><text x="11.8580%" y="655.50">[..</text></g><g><title>[unknown] (55,881,349 samples, 1.77%)</title><rect x="11.6080%" y="629" width="1.7725%" height="15" fill="rgb(221,10,30)" fg:x="365960761" fg:w="55881349"/><text x="11.8580%" y="639.50">[..</text></g><g><title>[unknown] (2,721,774 samples, 0.09%)</title><rect x="13.2942%" y="613" width="0.0863%" height="15" fill="rgb(210,229,1)" fg:x="419120336" fg:w="2721774"/><text x="13.5442%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13,845,647 samples, 0.44%)</title><rect x="13.3805%" y="581" width="0.4392%" height="15" fill="rgb(222,148,37)" fg:x="421842110" fg:w="13845647"/><text x="13.6305%" y="591.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (9,225,152 samples, 0.29%)</title><rect x="13.5271%" y="565" width="0.2926%" height="15" fill="rgb(234,67,33)" fg:x="426462605" fg:w="9225152"/><text x="13.7771%" y="575.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (9,225,152 samples, 0.29%)</title><rect x="13.5271%" y="549" width="0.2926%" height="15" fill="rgb(247,98,35)" fg:x="426462605" fg:w="9225152"/><text x="13.7771%" y="559.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (9,225,152 samples, 0.29%)</title><rect x="13.5271%" y="533" width="0.2926%" height="15" fill="rgb(247,138,52)" fg:x="426462605" fg:w="9225152"/><text x="13.7771%" y="543.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::nonzero_trailing_zeros (9,225,152 samples, 0.29%)</title><rect x="13.5271%" y="517" width="0.2926%" height="15" fill="rgb(213,79,30)" fg:x="426462605" fg:w="9225152"/><text x="13.7771%" y="527.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (9,225,152 samples, 0.29%)</title><rect x="13.5271%" y="501" width="0.2926%" height="15" fill="rgb(246,177,23)" fg:x="426462605" fg:w="9225152"/><text x="13.7771%" y="511.50"></text></g><g><title>[libc.so.6] (32,003,150 samples, 1.02%)</title><rect x="13.9663%" y="533" width="1.0151%" height="15" fill="rgb(230,62,27)" fg:x="440309461" fg:w="32003150"/><text x="14.2163%" y="543.50"></text></g><g><title>[libc.so.6] (22,760,629 samples, 0.72%)</title><rect x="14.2594%" y="517" width="0.7219%" height="15" fill="rgb(216,154,8)" fg:x="449551982" fg:w="22760629"/><text x="14.5094%" y="527.50"></text></g><g><title>[libc.so.6] (4,614,503 samples, 0.15%)</title><rect x="14.8350%" y="501" width="0.1464%" height="15" fill="rgb(244,35,45)" fg:x="467698108" fg:w="4614503"/><text x="15.0850%" y="511.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (50,476,947 samples, 1.60%)</title><rect x="13.8197%" y="581" width="1.6011%" height="15" fill="rgb(251,115,12)" fg:x="435687757" fg:w="50476947"/><text x="14.0697%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (50,476,947 samples, 1.60%)</title><rect x="13.8197%" y="565" width="1.6011%" height="15" fill="rgb(240,54,50)" fg:x="435687757" fg:w="50476947"/><text x="14.0697%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;(&amp;str,json::Node)&gt; (50,476,947 samples, 1.60%)</title><rect x="13.8197%" y="549" width="1.6011%" height="15" fill="rgb(233,84,52)" fg:x="435687757" fg:w="50476947"/><text x="14.0697%" y="559.50"></text></g><g><title>cfree (13,852,093 samples, 0.44%)</title><rect x="14.9814%" y="533" width="0.4394%" height="15" fill="rgb(207,117,47)" fg:x="472312611" fg:w="13852093"/><text x="15.2314%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (68,939,851 samples, 2.19%)</title><rect x="13.3805%" y="597" width="2.1867%" height="15" fill="rgb(249,43,39)" fg:x="421842110" fg:w="68939851"/><text x="13.6305%" y="607.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::iter (4,617,257 samples, 0.15%)</title><rect x="15.4208%" y="581" width="0.1465%" height="15" fill="rgb(209,38,44)" fg:x="486164704" fg:w="4617257"/><text x="15.6708%" y="591.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (4,617,257 samples, 0.15%)</title><rect x="15.4208%" y="565" width="0.1465%" height="15" fill="rgb(236,212,23)" fg:x="486164704" fg:w="4617257"/><text x="15.6708%" y="575.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_full (4,617,257 samples, 0.15%)</title><rect x="15.4208%" y="549" width="0.1465%" height="15" fill="rgb(242,79,21)" fg:x="486164704" fg:w="4617257"/><text x="15.6708%" y="559.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::invert (4,617,257 samples, 0.15%)</title><rect x="15.4208%" y="533" width="0.1465%" height="15" fill="rgb(211,96,35)" fg:x="486164704" fg:w="4617257"/><text x="15.6708%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (4,617,788 samples, 0.15%)</title><rect x="15.5672%" y="597" width="0.1465%" height="15" fill="rgb(253,215,40)" fg:x="490781961" fg:w="4617788"/><text x="15.8172%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,617,788 samples, 0.15%)</title><rect x="15.5672%" y="581" width="0.1465%" height="15" fill="rgb(211,81,21)" fg:x="490781961" fg:w="4617788"/><text x="15.8172%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (4,617,788 samples, 0.15%)</title><rect x="15.5672%" y="565" width="0.1465%" height="15" fill="rgb(208,190,38)" fg:x="490781961" fg:w="4617788"/><text x="15.8172%" y="575.50"></text></g><g><title>__rustc::__rdl_dealloc (4,617,788 samples, 0.15%)</title><rect x="15.5672%" y="549" width="0.1465%" height="15" fill="rgb(235,213,38)" fg:x="490781961" fg:w="4617788"/><text x="15.8172%" y="559.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4,617,788 samples, 0.15%)</title><rect x="15.5672%" y="533" width="0.1465%" height="15" fill="rgb(237,122,38)" fg:x="490781961" fg:w="4617788"/><text x="15.8172%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (78,161,722 samples, 2.48%)</title><rect x="13.3805%" y="629" width="2.4792%" height="15" fill="rgb(244,218,35)" fg:x="421842110" fg:w="78161722"/><text x="13.6305%" y="639.50">&lt;h..</text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (78,161,722 samples, 2.48%)</title><rect x="13.3805%" y="613" width="2.4792%" height="15" fill="rgb(240,68,47)" fg:x="421842110" fg:w="78161722"/><text x="13.6305%" y="623.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::is_empty_singleton (4,604,083 samples, 0.15%)</title><rect x="15.7137%" y="597" width="0.1460%" height="15" fill="rgb(210,16,53)" fg:x="495399749" fg:w="4604083"/><text x="15.9637%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,716,697 samples, 0.09%)</title><rect x="15.8598%" y="629" width="0.0862%" height="15" fill="rgb(235,124,12)" fg:x="500005998" fg:w="2716697"/><text x="16.1098%" y="639.50"></text></g><g><title>[libc.so.6] (4,620,716 samples, 0.15%)</title><rect x="15.9460%" y="421" width="0.1466%" height="15" fill="rgb(224,169,11)" fg:x="502722695" fg:w="4620716"/><text x="16.1960%" y="431.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,242,074 samples, 0.29%)</title><rect x="15.9460%" y="501" width="0.2932%" height="15" fill="rgb(250,166,2)" fg:x="502722695" fg:w="9242074"/><text x="16.1960%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9,242,074 samples, 0.29%)</title><rect x="15.9460%" y="485" width="0.2932%" height="15" fill="rgb(242,216,29)" fg:x="502722695" fg:w="9242074"/><text x="16.1960%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (9,242,074 samples, 0.29%)</title><rect x="15.9460%" y="469" width="0.2932%" height="15" fill="rgb(230,116,27)" fg:x="502722695" fg:w="9242074"/><text x="16.1960%" y="479.50"></text></g><g><title>__rustc::__rdl_dealloc (9,242,074 samples, 0.29%)</title><rect x="15.9460%" y="453" width="0.2932%" height="15" fill="rgb(228,99,48)" fg:x="502722695" fg:w="9242074"/><text x="16.1960%" y="463.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9,242,074 samples, 0.29%)</title><rect x="15.9460%" y="437" width="0.2932%" height="15" fill="rgb(253,11,6)" fg:x="502722695" fg:w="9242074"/><text x="16.1960%" y="447.50"></text></g><g><title>cfree (4,621,358 samples, 0.15%)</title><rect x="16.0925%" y="421" width="0.1466%" height="15" fill="rgb(247,143,39)" fg:x="507343411" fg:w="4621358"/><text x="16.3425%" y="431.50"></text></g><g><title>[libc.so.6] (36,721,619 samples, 1.16%)</title><rect x="16.2391%" y="453" width="1.1648%" height="15" fill="rgb(236,97,10)" fg:x="511964769" fg:w="36721619"/><text x="16.4891%" y="463.50"></text></g><g><title>[libc.so.6] (36,721,619 samples, 1.16%)</title><rect x="16.2391%" y="437" width="1.1648%" height="15" fill="rgb(233,208,19)" fg:x="511964769" fg:w="36721619"/><text x="16.4891%" y="447.50"></text></g><g><title>[libc.so.6] (22,872,879 samples, 0.73%)</title><rect x="16.6784%" y="421" width="0.7255%" height="15" fill="rgb(216,164,2)" fg:x="525813509" fg:w="22872879"/><text x="16.9284%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;(&amp;str,json::Node)&gt; (50,584,594 samples, 1.60%)</title><rect x="15.9460%" y="613" width="1.6045%" height="15" fill="rgb(220,129,5)" fg:x="502722695" fg:w="50584594"/><text x="16.1960%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;json::Node&gt; (50,584,594 samples, 1.60%)</title><rect x="15.9460%" y="597" width="1.6045%" height="15" fill="rgb(242,17,10)" fg:x="502722695" fg:w="50584594"/><text x="16.1960%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;json::Node&gt;&gt; (50,584,594 samples, 1.60%)</title><rect x="15.9460%" y="581" width="1.6045%" height="15" fill="rgb(242,107,0)" fg:x="502722695" fg:w="50584594"/><text x="16.1960%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (50,584,594 samples, 1.60%)</title><rect x="15.9460%" y="565" width="1.6045%" height="15" fill="rgb(251,28,31)" fg:x="502722695" fg:w="50584594"/><text x="16.1960%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[json::Node]&gt; (50,584,594 samples, 1.60%)</title><rect x="15.9460%" y="549" width="1.6045%" height="15" fill="rgb(233,223,10)" fg:x="502722695" fg:w="50584594"/><text x="16.1960%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;json::Node&gt; (50,584,594 samples, 1.60%)</title><rect x="15.9460%" y="533" width="1.6045%" height="15" fill="rgb(215,21,27)" fg:x="502722695" fg:w="50584594"/><text x="16.1960%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;&amp;str,json::Node&gt;&gt;&gt; (50,584,594 samples, 1.60%)</title><rect x="15.9460%" y="517" width="1.6045%" height="15" fill="rgb(232,23,21)" fg:x="502722695" fg:w="50584594"/><text x="16.1960%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;&amp;str,json::Node&gt;&gt; (41,342,520 samples, 1.31%)</title><rect x="16.2391%" y="501" width="1.3114%" height="15" fill="rgb(244,5,23)" fg:x="511964769" fg:w="41342520"/><text x="16.4891%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;&amp;str,json::Node,std::hash::random::RandomState&gt;&gt; (41,342,520 samples, 1.31%)</title><rect x="16.2391%" y="485" width="1.3114%" height="15" fill="rgb(226,81,46)" fg:x="511964769" fg:w="41342520"/><text x="16.4891%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(&amp;str,json::Node)&gt;&gt; (41,342,520 samples, 1.31%)</title><rect x="16.2391%" y="469" width="1.3114%" height="15" fill="rgb(247,70,30)" fg:x="511964769" fg:w="41342520"/><text x="16.4891%" y="479.50"></text></g><g><title>cfree (4,620,901 samples, 0.15%)</title><rect x="17.4039%" y="453" width="0.1466%" height="15" fill="rgb(212,68,19)" fg:x="548686388" fg:w="4620901"/><text x="17.6539%" y="463.50"></text></g><g><title>core::str::converts::from_utf8 (34,403,446 samples, 1.09%)</title><rect x="17.5505%" y="597" width="1.0913%" height="15" fill="rgb(240,187,13)" fg:x="553307289" fg:w="34403446"/><text x="17.8005%" y="607.50"></text></g><g><title>core::str::validations::run_utf8_validation (34,403,446 samples, 1.09%)</title><rect x="17.5505%" y="581" width="1.0913%" height="15" fill="rgb(223,113,26)" fg:x="553307289" fg:w="34403446"/><text x="17.8005%" y="591.50"></text></g><g><title>json::main (84,988,042 samples, 2.70%)</title><rect x="15.9460%" y="629" width="2.6958%" height="15" fill="rgb(206,192,2)" fg:x="502722695" fg:w="84988042"/><text x="16.1960%" y="639.50">js..</text></g><g><title>std::fs::read_to_string (34,403,448 samples, 1.09%)</title><rect x="17.5505%" y="613" width="1.0913%" height="15" fill="rgb(241,108,4)" fg:x="553307289" fg:w="34403448"/><text x="17.8005%" y="623.50"></text></g><g><title>core::ops::function::Fn::call (5,449,561 samples, 0.17%)</title><rect x="18.9055%" y="389" width="0.1729%" height="15" fill="rgb(247,173,49)" fg:x="596025146" fg:w="5449561"/><text x="19.1555%" y="399.50"></text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (25,369,346 samples, 0.80%)</title><rect x="18.9055%" y="405" width="0.8047%" height="15" fill="rgb(224,114,35)" fg:x="596025146" fg:w="25369346"/><text x="19.1555%" y="415.50"></text></g><g><title>kukka::delimited::{{closure}} (19,919,785 samples, 0.63%)</title><rect x="19.0783%" y="389" width="0.6318%" height="15" fill="rgb(245,159,27)" fg:x="601474707" fg:w="19919785"/><text x="19.3283%" y="399.50"></text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (19,919,785 samples, 0.63%)</title><rect x="19.0783%" y="373" width="0.6318%" height="15" fill="rgb(245,172,44)" fg:x="601474707" fg:w="19919785"/><text x="19.3283%" y="383.50"></text></g><g><title>kukka::multispace0::{{closure}} (19,919,785 samples, 0.63%)</title><rect x="19.0783%" y="357" width="0.6318%" height="15" fill="rgb(236,23,11)" fg:x="601474707" fg:w="19919785"/><text x="19.3283%" y="367.50"></text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (83,186,874 samples, 2.64%)</title><rect x="18.7293%" y="437" width="2.6386%" height="15" fill="rgb(205,117,38)" fg:x="590472997" fg:w="83186874"/><text x="18.9793%" y="447.50">&lt;F..</text></g><g><title>kukka::separated::{{closure}} (83,186,874 samples, 2.64%)</title><rect x="18.7293%" y="421" width="2.6386%" height="15" fill="rgb(237,72,25)" fg:x="590472997" fg:w="83186874"/><text x="18.9793%" y="431.50">ku..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (52,265,379 samples, 1.66%)</title><rect x="19.7102%" y="405" width="1.6578%" height="15" fill="rgb(244,70,9)" fg:x="621394492" fg:w="52265379"/><text x="19.9602%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (52,265,379 samples, 1.66%)</title><rect x="19.7102%" y="389" width="1.6578%" height="15" fill="rgb(217,125,39)" fg:x="621394492" fg:w="52265379"/><text x="19.9602%" y="399.50"></text></g><g><title>core::ptr::write (44,023,334 samples, 1.40%)</title><rect x="19.9716%" y="373" width="1.3964%" height="15" fill="rgb(235,36,10)" fg:x="629636537" fg:w="44023334"/><text x="20.2216%" y="383.50"></text></g><g><title>json::parse_array (91,429,146 samples, 2.90%)</title><rect x="18.7293%" y="517" width="2.9001%" height="15" fill="rgb(251,123,47)" fg:x="590472997" fg:w="91429146"/><text x="18.9793%" y="527.50">js..</text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (91,429,146 samples, 2.90%)</title><rect x="18.7293%" y="501" width="2.9001%" height="15" fill="rgb(221,13,13)" fg:x="590472997" fg:w="91429146"/><text x="18.9793%" y="511.50">&lt;F..</text></g><g><title>kukka::map::{{closure}} (91,429,146 samples, 2.90%)</title><rect x="18.7293%" y="485" width="2.9001%" height="15" fill="rgb(238,131,9)" fg:x="590472997" fg:w="91429146"/><text x="18.9793%" y="495.50">ku..</text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (91,429,146 samples, 2.90%)</title><rect x="18.7293%" y="469" width="2.9001%" height="15" fill="rgb(211,50,8)" fg:x="590472997" fg:w="91429146"/><text x="18.9793%" y="479.50">&lt;F..</text></g><g><title>kukka::delimited::{{closure}} (91,429,146 samples, 2.90%)</title><rect x="18.7293%" y="453" width="2.9001%" height="15" fill="rgb(245,182,24)" fg:x="590472997" fg:w="91429146"/><text x="18.9793%" y="463.50">ku..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (8,242,272 samples, 0.26%)</title><rect x="21.3680%" y="437" width="0.2614%" height="15" fill="rgb(242,14,37)" fg:x="673659871" fg:w="8242272"/><text x="21.6180%" y="447.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (2,769,813 samples, 0.09%)</title><rect x="21.6294%" y="405" width="0.0879%" height="15" fill="rgb(246,228,12)" fg:x="681902143" fg:w="2769813"/><text x="21.8794%" y="415.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (2,769,813 samples, 0.09%)</title><rect x="21.6294%" y="389" width="0.0879%" height="15" fill="rgb(213,55,15)" fg:x="681902143" fg:w="2769813"/><text x="21.8794%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (2,769,813 samples, 0.09%)</title><rect x="21.6294%" y="373" width="0.0879%" height="15" fill="rgb(209,9,3)" fg:x="681902143" fg:w="2769813"/><text x="21.8794%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (5,498,219 samples, 0.17%)</title><rect x="21.8919%" y="357" width="0.1744%" height="15" fill="rgb(230,59,30)" fg:x="690177265" fg:w="5498219"/><text x="22.1419%" y="367.50"></text></g><g><title>json::parse_boolean (16,499,926 samples, 0.52%)</title><rect x="21.6294%" y="517" width="0.5234%" height="15" fill="rgb(209,121,21)" fg:x="681902143" fg:w="16499926"/><text x="21.8794%" y="527.50"></text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (16,499,926 samples, 0.52%)</title><rect x="21.6294%" y="501" width="0.5234%" height="15" fill="rgb(220,109,13)" fg:x="681902143" fg:w="16499926"/><text x="21.8794%" y="511.50"></text></g><g><title>kukka::or::{{closure}} (16,499,926 samples, 0.52%)</title><rect x="21.6294%" y="485" width="0.5234%" height="15" fill="rgb(232,18,1)" fg:x="681902143" fg:w="16499926"/><text x="21.8794%" y="495.50"></text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (16,499,926 samples, 0.52%)</title><rect x="21.6294%" y="469" width="0.5234%" height="15" fill="rgb(215,41,42)" fg:x="681902143" fg:w="16499926"/><text x="21.8794%" y="479.50"></text></g><g><title>kukka::value::{{closure}} (16,499,926 samples, 0.52%)</title><rect x="21.6294%" y="453" width="0.5234%" height="15" fill="rgb(224,123,36)" fg:x="681902143" fg:w="16499926"/><text x="21.8794%" y="463.50"></text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (16,499,926 samples, 0.52%)</title><rect x="21.6294%" y="437" width="0.5234%" height="15" fill="rgb(240,125,3)" fg:x="681902143" fg:w="16499926"/><text x="21.8794%" y="447.50"></text></g><g><title>kukka::string::{{closure}} (16,499,926 samples, 0.52%)</title><rect x="21.6294%" y="421" width="0.5234%" height="15" fill="rgb(205,98,50)" fg:x="681902143" fg:w="16499926"/><text x="21.8794%" y="431.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (13,730,113 samples, 0.44%)</title><rect x="21.7173%" y="405" width="0.4355%" height="15" fill="rgb(205,185,37)" fg:x="684671956" fg:w="13730113"/><text x="21.9673%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (13,730,113 samples, 0.44%)</title><rect x="21.7173%" y="389" width="0.4355%" height="15" fill="rgb(238,207,15)" fg:x="684671956" fg:w="13730113"/><text x="21.9673%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (13,730,113 samples, 0.44%)</title><rect x="21.7173%" y="373" width="0.4355%" height="15" fill="rgb(213,199,42)" fg:x="684671956" fg:w="13730113"/><text x="21.9673%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (2,726,585 samples, 0.09%)</title><rect x="22.0663%" y="357" width="0.0865%" height="15" fill="rgb(235,201,11)" fg:x="695675484" fg:w="2726585"/><text x="22.3163%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (2,726,585 samples, 0.09%)</title><rect x="22.0663%" y="341" width="0.0865%" height="15" fill="rgb(207,46,11)" fg:x="695675484" fg:w="2726585"/><text x="22.3163%" y="351.50"></text></g><g><title>kukka::char::{{closure}} (2,730,548 samples, 0.09%)</title><rect x="22.1528%" y="421" width="0.0866%" height="15" fill="rgb(241,35,35)" fg:x="698402069" fg:w="2730548"/><text x="22.4028%" y="431.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (2,730,548 samples, 0.09%)</title><rect x="22.1528%" y="405" width="0.0866%" height="15" fill="rgb(243,32,47)" fg:x="698402069" fg:w="2730548"/><text x="22.4028%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (2,730,548 samples, 0.09%)</title><rect x="22.1528%" y="389" width="0.0866%" height="15" fill="rgb(247,202,23)" fg:x="698402069" fg:w="2730548"/><text x="22.4028%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (2,730,548 samples, 0.09%)</title><rect x="22.1528%" y="373" width="0.0866%" height="15" fill="rgb(219,102,11)" fg:x="698402069" fg:w="2730548"/><text x="22.4028%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (2,730,528 samples, 0.09%)</title><rect x="22.1528%" y="357" width="0.0866%" height="15" fill="rgb(243,110,44)" fg:x="698402089" fg:w="2730528"/><text x="22.4028%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::first (5,465,471 samples, 0.17%)</title><rect x="23.9869%" y="373" width="0.1734%" height="15" fill="rgb(222,74,54)" fg:x="756226290" fg:w="5465471"/><text x="24.2369%" y="383.50"></text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (8,242,774 samples, 0.26%)</title><rect x="23.9869%" y="405" width="0.2615%" height="15" fill="rgb(216,99,12)" fg:x="756226290" fg:w="8242774"/><text x="24.2369%" y="415.50"></text></g><g><title>kukka::char::{{closure}} (8,242,774 samples, 0.26%)</title><rect x="23.9869%" y="389" width="0.2615%" height="15" fill="rgb(226,22,26)" fg:x="756226290" fg:w="8242774"/><text x="24.2369%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (2,777,303 samples, 0.09%)</title><rect x="24.1603%" y="373" width="0.0881%" height="15" fill="rgb(217,163,10)" fg:x="761691761" fg:w="2777303"/><text x="24.4103%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (2,777,303 samples, 0.09%)</title><rect x="24.1603%" y="357" width="0.0881%" height="15" fill="rgb(213,25,53)" fg:x="761691761" fg:w="2777303"/><text x="24.4103%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (2,777,303 samples, 0.09%)</title><rect x="24.1603%" y="341" width="0.0881%" height="15" fill="rgb(252,105,26)" fg:x="761691761" fg:w="2777303"/><text x="24.4103%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (90,822,543 samples, 2.88%)</title><rect x="24.2484%" y="405" width="2.8808%" height="15" fill="rgb(220,39,43)" fg:x="764469064" fg:w="90822543"/><text x="24.4984%" y="415.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (90,822,543 samples, 2.88%)</title><rect x="24.2484%" y="389" width="2.8808%" height="15" fill="rgb(229,68,48)" fg:x="764469064" fg:w="90822543"/><text x="24.4984%" y="399.50">al..</text></g><g><title>core::ptr::write (88,089,747 samples, 2.79%)</title><rect x="24.3350%" y="373" width="2.7941%" height="15" fill="rgb(252,8,32)" fg:x="767201860" fg:w="88089747"/><text x="24.5850%" y="383.50">co..</text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (162,428,734 samples, 5.15%)</title><rect x="22.1528%" y="469" width="5.1521%" height="15" fill="rgb(223,20,43)" fg:x="698402069" fg:w="162428734"/><text x="22.4028%" y="479.50">&lt;F as ..</text></g><g><title>kukka::delimited::{{closure}} (162,428,734 samples, 5.15%)</title><rect x="22.1528%" y="453" width="5.1521%" height="15" fill="rgb(229,81,49)" fg:x="698402069" fg:w="162428734"/><text x="22.4028%" y="463.50">kukka:..</text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (162,428,734 samples, 5.15%)</title><rect x="22.1528%" y="437" width="5.1521%" height="15" fill="rgb(236,28,36)" fg:x="698402069" fg:w="162428734"/><text x="22.4028%" y="447.50">&lt;F as ..</text></g><g><title>kukka::separated::{{closure}} (159,698,186 samples, 5.07%)</title><rect x="22.2394%" y="421" width="5.0655%" height="15" fill="rgb(249,185,26)" fg:x="701132617" fg:w="159698186"/><text x="22.4894%" y="431.50">kukka:..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5,539,196 samples, 0.18%)</title><rect x="27.1292%" y="405" width="0.1757%" height="15" fill="rgb(249,174,33)" fg:x="855291607" fg:w="5539196"/><text x="27.3792%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5,539,196 samples, 0.18%)</title><rect x="27.1292%" y="389" width="0.1757%" height="15" fill="rgb(233,201,37)" fg:x="855291607" fg:w="5539196"/><text x="27.3792%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5,539,196 samples, 0.18%)</title><rect x="27.1292%" y="373" width="0.1757%" height="15" fill="rgb(221,78,26)" fg:x="855291607" fg:w="5539196"/><text x="27.3792%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (5,539,196 samples, 0.18%)</title><rect x="27.1292%" y="357" width="0.1757%" height="15" fill="rgb(250,127,30)" fg:x="855291607" fg:w="5539196"/><text x="27.3792%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (5,539,196 samples, 0.18%)</title><rect x="27.1292%" y="341" width="0.1757%" height="15" fill="rgb(230,49,44)" fg:x="855291607" fg:w="5539196"/><text x="27.3792%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,766,971 samples, 0.09%)</title><rect x="27.2171%" y="325" width="0.0878%" height="15" fill="rgb(229,67,23)" fg:x="858063832" fg:w="2766971"/><text x="27.4671%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,766,971 samples, 0.09%)</title><rect x="27.2171%" y="309" width="0.0878%" height="15" fill="rgb(249,83,47)" fg:x="858063832" fg:w="2766971"/><text x="27.4671%" y="319.50"></text></g><g><title>alloc::alloc::alloc (2,766,971 samples, 0.09%)</title><rect x="27.2171%" y="293" width="0.0878%" height="15" fill="rgb(215,43,3)" fg:x="858063832" fg:w="2766971"/><text x="27.4671%" y="303.50"></text></g><g><title>__rustc::__rdl_alloc (2,766,971 samples, 0.09%)</title><rect x="27.2171%" y="277" width="0.0878%" height="15" fill="rgb(238,154,13)" fg:x="858063832" fg:w="2766971"/><text x="27.4671%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2,766,971 samples, 0.09%)</title><rect x="27.2171%" y="261" width="0.0878%" height="15" fill="rgb(219,56,2)" fg:x="858063832" fg:w="2766971"/><text x="27.4671%" y="271.50"></text></g><g><title>malloc (2,766,971 samples, 0.09%)</title><rect x="27.2171%" y="245" width="0.0878%" height="15" fill="rgb(233,0,4)" fg:x="858063832" fg:w="2766971"/><text x="27.4671%" y="255.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (16,558,209 samples, 0.53%)</title><rect x="27.3049%" y="453" width="0.5252%" height="15" fill="rgb(235,30,7)" fg:x="860830803" fg:w="16558209"/><text x="27.5549%" y="463.50"></text></g><g><title>alloc::alloc::exchange_malloc (16,558,209 samples, 0.53%)</title><rect x="27.3049%" y="437" width="0.5252%" height="15" fill="rgb(250,79,13)" fg:x="860830803" fg:w="16558209"/><text x="27.5549%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16,558,209 samples, 0.53%)</title><rect x="27.3049%" y="421" width="0.5252%" height="15" fill="rgb(211,146,34)" fg:x="860830803" fg:w="16558209"/><text x="27.5549%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16,558,209 samples, 0.53%)</title><rect x="27.3049%" y="405" width="0.5252%" height="15" fill="rgb(228,22,38)" fg:x="860830803" fg:w="16558209"/><text x="27.5549%" y="415.50"></text></g><g><title>alloc::alloc::alloc (16,558,209 samples, 0.53%)</title><rect x="27.3049%" y="389" width="0.5252%" height="15" fill="rgb(235,168,5)" fg:x="860830803" fg:w="16558209"/><text x="27.5549%" y="399.50"></text></g><g><title>__rustc::__rdl_alloc (16,558,209 samples, 0.53%)</title><rect x="27.3049%" y="373" width="0.5252%" height="15" fill="rgb(221,155,16)" fg:x="860830803" fg:w="16558209"/><text x="27.5549%" y="383.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (16,558,209 samples, 0.53%)</title><rect x="27.3049%" y="357" width="0.5252%" height="15" fill="rgb(215,215,53)" fg:x="860830803" fg:w="16558209"/><text x="27.5549%" y="367.50"></text></g><g><title>[libc.so.6] (16,558,209 samples, 0.53%)</title><rect x="27.3049%" y="341" width="0.5252%" height="15" fill="rgb(223,4,10)" fg:x="860830803" fg:w="16558209"/><text x="27.5549%" y="351.50"></text></g><g><title>[libc.so.6] (16,558,209 samples, 0.53%)</title><rect x="27.3049%" y="325" width="0.5252%" height="15" fill="rgb(234,103,6)" fg:x="860830803" fg:w="16558209"/><text x="27.5549%" y="335.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (30,172,129 samples, 0.96%)</title><rect x="27.8301%" y="261" width="0.9570%" height="15" fill="rgb(227,97,0)" fg:x="877389012" fg:w="30172129"/><text x="28.0801%" y="271.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (30,172,129 samples, 0.96%)</title><rect x="27.8301%" y="245" width="0.9570%" height="15" fill="rgb(234,150,53)" fg:x="877389012" fg:w="30172129"/><text x="28.0801%" y="255.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (30,302,938 samples, 0.96%)</title><rect x="28.7871%" y="261" width="0.9612%" height="15" fill="rgb(228,201,54)" fg:x="907561141" fg:w="30302938"/><text x="29.0371%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (30,302,938 samples, 0.96%)</title><rect x="28.7871%" y="245" width="0.9612%" height="15" fill="rgb(222,22,37)" fg:x="907561141" fg:w="30302938"/><text x="29.0371%" y="255.50"></text></g><g><title>core::intrinsics::unlikely (15,598,041 samples, 0.49%)</title><rect x="29.7483%" y="245" width="0.4948%" height="15" fill="rgb(237,53,32)" fg:x="937864079" fg:w="15598041"/><text x="29.9983%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (76,073,109 samples, 2.41%)</title><rect x="27.8301%" y="309" width="2.4130%" height="15" fill="rgb(233,25,53)" fg:x="877389012" fg:w="76073109"/><text x="28.0801%" y="319.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (76,073,109 samples, 2.41%)</title><rect x="27.8301%" y="293" width="2.4130%" height="15" fill="rgb(210,40,34)" fg:x="877389012" fg:w="76073109"/><text x="28.0801%" y="303.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (76,073,109 samples, 2.41%)</title><rect x="27.8301%" y="277" width="2.4130%" height="15" fill="rgb(241,220,44)" fg:x="877389012" fg:w="76073109"/><text x="28.0801%" y="287.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (15,598,042 samples, 0.49%)</title><rect x="29.7483%" y="261" width="0.4948%" height="15" fill="rgb(235,28,35)" fg:x="937864079" fg:w="15598042"/><text x="29.9983%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (2,780,102 samples, 0.09%)</title><rect x="30.2431%" y="309" width="0.0882%" height="15" fill="rgb(210,56,17)" fg:x="953462121" fg:w="2780102"/><text x="30.4931%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (5,516,578 samples, 0.17%)</title><rect x="30.3313%" y="293" width="0.1750%" height="15" fill="rgb(224,130,29)" fg:x="956242223" fg:w="5516578"/><text x="30.5813%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (5,516,578 samples, 0.17%)</title><rect x="30.3313%" y="277" width="0.1750%" height="15" fill="rgb(235,212,8)" fg:x="956242223" fg:w="5516578"/><text x="30.5813%" y="287.50"></text></g><g><title>core::ptr::write (5,516,578 samples, 0.17%)</title><rect x="30.3313%" y="261" width="0.1750%" height="15" fill="rgb(223,33,50)" fg:x="956242223" fg:w="5516578"/><text x="30.5813%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (5,539,953 samples, 0.18%)</title><rect x="30.5062%" y="293" width="0.1757%" height="15" fill="rgb(219,149,13)" fg:x="961758801" fg:w="5539953"/><text x="30.7562%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (5,539,953 samples, 0.18%)</title><rect x="30.5062%" y="277" width="0.1757%" height="15" fill="rgb(250,156,29)" fg:x="961758801" fg:w="5539953"/><text x="30.7562%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (5,539,953 samples, 0.18%)</title><rect x="30.5062%" y="261" width="0.1757%" height="15" fill="rgb(216,193,19)" fg:x="961758801" fg:w="5539953"/><text x="30.7562%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (106,543,959 samples, 3.38%)</title><rect x="27.8301%" y="357" width="3.3795%" height="15" fill="rgb(216,135,14)" fg:x="877389012" fg:w="106543959"/><text x="28.0801%" y="367.50">cor..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (106,543,959 samples, 3.38%)</title><rect x="27.8301%" y="341" width="3.3795%" height="15" fill="rgb(241,47,5)" fg:x="877389012" fg:w="106543959"/><text x="28.0801%" y="351.50">&lt;ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (106,543,959 samples, 3.38%)</title><rect x="27.8301%" y="325" width="3.3795%" height="15" fill="rgb(233,42,35)" fg:x="877389012" fg:w="106543959"/><text x="28.0801%" y="335.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (27,690,748 samples, 0.88%)</title><rect x="30.3313%" y="309" width="0.8783%" height="15" fill="rgb(231,13,6)" fg:x="956242223" fg:w="27690748"/><text x="30.5813%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (16,634,217 samples, 0.53%)</title><rect x="30.6820%" y="293" width="0.5276%" height="15" fill="rgb(207,181,40)" fg:x="967298754" fg:w="16634217"/><text x="30.9320%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_hash (8,271,469 samples, 0.26%)</title><rect x="30.9472%" y="277" width="0.2624%" height="15" fill="rgb(254,173,49)" fg:x="975661502" fg:w="8271469"/><text x="31.1972%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (8,271,469 samples, 0.26%)</title><rect x="30.9472%" y="261" width="0.2624%" height="15" fill="rgb(221,1,38)" fg:x="975661502" fg:w="8271469"/><text x="31.1972%" y="271.50"></text></g><g><title>[unknown] (564,864,531 samples, 17.92%)</title><rect x="13.3805%" y="645" width="17.9171%" height="15" fill="rgb(206,124,46)" fg:x="421842110" fg:w="564864531"/><text x="13.6305%" y="655.50">[unknown]</text></g><g><title>json::parse_json (398,995,904 samples, 12.66%)</title><rect x="18.6417%" y="629" width="12.6558%" height="15" fill="rgb(249,21,11)" fg:x="587710737" fg:w="398995904"/><text x="18.8917%" y="639.50">json::parse_json</text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (396,233,644 samples, 12.57%)</title><rect x="18.7293%" y="613" width="12.5682%" height="15" fill="rgb(222,201,40)" fg:x="590472997" fg:w="396233644"/><text x="18.9793%" y="623.50">&lt;F as kukka::Parser..</text></g><g><title>kukka::delimited::{{closure}} (396,233,644 samples, 12.57%)</title><rect x="18.7293%" y="597" width="12.5682%" height="15" fill="rgb(235,61,29)" fg:x="590472997" fg:w="396233644"/><text x="18.9793%" y="607.50">kukka::delimited::{..</text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (396,233,644 samples, 12.57%)</title><rect x="18.7293%" y="581" width="12.5682%" height="15" fill="rgb(219,207,3)" fg:x="590472997" fg:w="396233644"/><text x="18.9793%" y="591.50">&lt;F as kukka::Parser..</text></g><g><title>json::parse_json::{{closure}} (396,233,644 samples, 12.57%)</title><rect x="18.7293%" y="565" width="12.5682%" height="15" fill="rgb(222,56,46)" fg:x="590472997" fg:w="396233644"/><text x="18.9793%" y="575.50">json::parse_json::{..</text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (396,233,644 samples, 12.57%)</title><rect x="18.7293%" y="549" width="12.5682%" height="15" fill="rgb(239,76,54)" fg:x="590472997" fg:w="396233644"/><text x="18.9793%" y="559.50">&lt;F as kukka::Parser..</text></g><g><title>core::ops::function::Fn::call (396,233,644 samples, 12.57%)</title><rect x="18.7293%" y="533" width="12.5682%" height="15" fill="rgb(231,124,27)" fg:x="590472997" fg:w="396233644"/><text x="18.9793%" y="543.50">core::ops::function..</text></g><g><title>json::parse_object (288,304,572 samples, 9.14%)</title><rect x="22.1528%" y="517" width="9.1448%" height="15" fill="rgb(249,195,6)" fg:x="698402069" fg:w="288304572"/><text x="22.4028%" y="527.50">json::parse_o..</text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (288,304,572 samples, 9.14%)</title><rect x="22.1528%" y="501" width="9.1448%" height="15" fill="rgb(237,174,47)" fg:x="698402069" fg:w="288304572"/><text x="22.4028%" y="511.50">&lt;F as kukka::..</text></g><g><title>kukka::map::{{closure}} (288,304,572 samples, 9.14%)</title><rect x="22.1528%" y="485" width="9.1448%" height="15" fill="rgb(206,201,31)" fg:x="698402069" fg:w="288304572"/><text x="22.4028%" y="495.50">kukka::map::{..</text></g><g><title>json::parse_object::{{closure}} (125,875,838 samples, 3.99%)</title><rect x="27.3049%" y="469" width="3.9927%" height="15" fill="rgb(231,57,52)" fg:x="860830803" fg:w="125875838"/><text x="27.5549%" y="479.50">json..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (109,317,629 samples, 3.47%)</title><rect x="27.8301%" y="453" width="3.4675%" height="15" fill="rgb(248,177,22)" fg:x="877389012" fg:w="109317629"/><text x="28.0801%" y="463.50">cor..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (109,317,629 samples, 3.47%)</title><rect x="27.8301%" y="437" width="3.4675%" height="15" fill="rgb(215,211,37)" fg:x="877389012" fg:w="109317629"/><text x="28.0801%" y="447.50">&lt;st..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (109,317,629 samples, 3.47%)</title><rect x="27.8301%" y="421" width="3.4675%" height="15" fill="rgb(241,128,51)" fg:x="877389012" fg:w="109317629"/><text x="28.0801%" y="431.50">&lt;st..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (109,317,629 samples, 3.47%)</title><rect x="27.8301%" y="405" width="3.4675%" height="15" fill="rgb(227,165,31)" fg:x="877389012" fg:w="109317629"/><text x="28.0801%" y="415.50">&lt;ha..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (109,317,629 samples, 3.47%)</title><rect x="27.8301%" y="389" width="3.4675%" height="15" fill="rgb(228,167,24)" fg:x="877389012" fg:w="109317629"/><text x="28.0801%" y="399.50">cor..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (109,317,629 samples, 3.47%)</title><rect x="27.8301%" y="373" width="3.4675%" height="15" fill="rgb(228,143,12)" fg:x="877389012" fg:w="109317629"/><text x="28.0801%" y="383.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(&amp;str,json::Node)&gt;&gt; (2,773,670 samples, 0.09%)</title><rect x="31.2096%" y="357" width="0.0880%" height="15" fill="rgb(249,149,8)" fg:x="983932971" fg:w="2773670"/><text x="31.4596%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,773,670 samples, 0.09%)</title><rect x="31.2096%" y="341" width="0.0880%" height="15" fill="rgb(243,35,44)" fg:x="983932971" fg:w="2773670"/><text x="31.4596%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(&amp;str,json::Node),alloc::alloc::Global&gt;&gt; (2,773,670 samples, 0.09%)</title><rect x="31.2096%" y="325" width="0.0880%" height="15" fill="rgb(246,89,9)" fg:x="983932971" fg:w="2773670"/><text x="31.4596%" y="335.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,773,670 samples, 0.09%)</title><rect x="31.2096%" y="309" width="0.0880%" height="15" fill="rgb(233,213,13)" fg:x="983932971" fg:w="2773670"/><text x="31.4596%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(&amp;str,json::Node)&gt;&gt; (2,773,670 samples, 0.09%)</title><rect x="31.2096%" y="293" width="0.0880%" height="15" fill="rgb(233,141,41)" fg:x="983932971" fg:w="2773670"/><text x="31.4596%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,773,670 samples, 0.09%)</title><rect x="31.2096%" y="277" width="0.0880%" height="15" fill="rgb(239,167,4)" fg:x="983932971" fg:w="2773670"/><text x="31.4596%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2,773,670 samples, 0.09%)</title><rect x="31.2096%" y="261" width="0.0880%" height="15" fill="rgb(209,217,16)" fg:x="983932971" fg:w="2773670"/><text x="31.4596%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,773,670 samples, 0.09%)</title><rect x="31.2096%" y="245" width="0.0880%" height="15" fill="rgb(219,88,35)" fg:x="983932971" fg:w="2773670"/><text x="31.4596%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (2,773,670 samples, 0.09%)</title><rect x="31.2096%" y="229" width="0.0880%" height="15" fill="rgb(220,193,23)" fg:x="983932971" fg:w="2773670"/><text x="31.4596%" y="239.50"></text></g><g><title>__rustc::__rdl_dealloc (2,773,670 samples, 0.09%)</title><rect x="31.2096%" y="213" width="0.0880%" height="15" fill="rgb(230,90,52)" fg:x="983932971" fg:w="2773670"/><text x="31.4596%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2,773,670 samples, 0.09%)</title><rect x="31.2096%" y="197" width="0.0880%" height="15" fill="rgb(252,106,19)" fg:x="983932971" fg:w="2773670"/><text x="31.4596%" y="207.50"></text></g><g><title>cfree (2,773,670 samples, 0.09%)</title><rect x="31.2096%" y="181" width="0.0880%" height="15" fill="rgb(206,74,20)" fg:x="983932971" fg:w="2773670"/><text x="31.4596%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8,262,712 samples, 0.26%)</title><rect x="31.9979%" y="581" width="0.2621%" height="15" fill="rgb(230,138,44)" fg:x="1008784546" fg:w="8262712"/><text x="32.2479%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2,737,898 samples, 0.09%)</title><rect x="32.1731%" y="565" width="0.0868%" height="15" fill="rgb(235,182,43)" fg:x="1014309360" fg:w="2737898"/><text x="32.4231%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (21,954,952 samples, 0.70%)</title><rect x="32.7853%" y="565" width="0.6964%" height="15" fill="rgb(242,16,51)" fg:x="1033609401" fg:w="21954952"/><text x="33.0353%" y="575.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (71,534,545 samples, 2.27%)</title><rect x="31.6487%" y="629" width="2.2690%" height="15" fill="rgb(248,9,4)" fg:x="997776165" fg:w="71534545"/><text x="31.8987%" y="639.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (71,534,545 samples, 2.27%)</title><rect x="31.6487%" y="613" width="2.2690%" height="15" fill="rgb(210,31,22)" fg:x="997776165" fg:w="71534545"/><text x="31.8987%" y="623.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (71,534,545 samples, 2.27%)</title><rect x="31.6487%" y="597" width="2.2690%" height="15" fill="rgb(239,54,39)" fg:x="997776165" fg:w="71534545"/><text x="31.8987%" y="607.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (52,263,452 samples, 1.66%)</title><rect x="32.2600%" y="581" width="1.6578%" height="15" fill="rgb(230,99,41)" fg:x="1017047258" fg:w="52263452"/><text x="32.5100%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (13,746,357 samples, 0.44%)</title><rect x="33.4817%" y="565" width="0.4360%" height="15" fill="rgb(253,106,12)" fg:x="1055564353" fg:w="13746357"/><text x="33.7317%" y="575.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (21,905,726 samples, 0.69%)</title><rect x="33.9177%" y="629" width="0.6948%" height="15" fill="rgb(213,46,41)" fg:x="1069310710" fg:w="21905726"/><text x="34.1677%" y="639.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (5,440,474 samples, 0.17%)</title><rect x="34.4400%" y="613" width="0.1726%" height="15" fill="rgb(215,133,35)" fg:x="1085775962" fg:w="5440474"/><text x="34.6900%" y="623.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (5,440,474 samples, 0.17%)</title><rect x="34.4400%" y="597" width="0.1726%" height="15" fill="rgb(213,28,5)" fg:x="1085775962" fg:w="5440474"/><text x="34.6900%" y="607.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (5,440,474 samples, 0.17%)</title><rect x="34.4400%" y="581" width="0.1726%" height="15" fill="rgb(215,77,49)" fg:x="1085775962" fg:w="5440474"/><text x="34.6900%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (107,221,689 samples, 3.40%)</title><rect x="31.2976%" y="645" width="3.4010%" height="15" fill="rgb(248,100,22)" fg:x="986706641" fg:w="107221689"/><text x="31.5476%" y="655.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,711,894 samples, 0.09%)</title><rect x="34.6125%" y="629" width="0.0860%" height="15" fill="rgb(208,67,9)" fg:x="1091216436" fg:w="2711894"/><text x="34.8625%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,711,894 samples, 0.09%)</title><rect x="34.6125%" y="613" width="0.0860%" height="15" fill="rgb(219,133,21)" fg:x="1091216436" fg:w="2711894"/><text x="34.8625%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,711,894 samples, 0.09%)</title><rect x="34.6125%" y="597" width="0.0860%" height="15" fill="rgb(246,46,29)" fg:x="1091216436" fg:w="2711894"/><text x="34.8625%" y="607.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (2,711,894 samples, 0.09%)</title><rect x="34.6125%" y="581" width="0.0860%" height="15" fill="rgb(246,185,52)" fg:x="1091216436" fg:w="2711894"/><text x="34.8625%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,711,894 samples, 0.09%)</title><rect x="34.6125%" y="565" width="0.0860%" height="15" fill="rgb(252,136,11)" fg:x="1091216436" fg:w="2711894"/><text x="34.8625%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,711,894 samples, 0.09%)</title><rect x="34.6125%" y="549" width="0.0860%" height="15" fill="rgb(219,138,53)" fg:x="1091216436" fg:w="2711894"/><text x="34.8625%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;json::Node&gt; (668,473,582 samples, 21.20%)</title><rect x="34.6986%" y="645" width="21.2035%" height="15" fill="rgb(211,51,23)" fg:x="1093928330" fg:w="668473582"/><text x="34.9486%" y="655.50">core::ptr::drop_in_place&lt;json::No..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;json::Node&gt;&gt; (218,328,893 samples, 6.93%)</title><rect x="48.9768%" y="629" width="6.9252%" height="15" fill="rgb(247,221,28)" fg:x="1544073019" fg:w="218328893"/><text x="49.2268%" y="639.50">core::ptr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (218,328,893 samples, 6.93%)</title><rect x="48.9768%" y="613" width="6.9252%" height="15" fill="rgb(251,222,45)" fg:x="1544073019" fg:w="218328893"/><text x="49.2268%" y="623.50">&lt;alloc::v..</text></g><g><title>core::ptr::drop_in_place&lt;[json::Node]&gt; (204,469,984 samples, 6.49%)</title><rect x="49.4164%" y="597" width="6.4856%" height="15" fill="rgb(217,162,53)" fg:x="1557931928" fg:w="204469984"/><text x="49.6664%" y="607.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;json::Node&gt; (195,231,085 samples, 6.19%)</title><rect x="49.7094%" y="581" width="6.1926%" height="15" fill="rgb(229,93,14)" fg:x="1567170827" fg:w="195231085"/><text x="49.9594%" y="591.50">core::pt..</text></g><g><title>hashbrown::control::tag::TagSliceExt::fill_empty (63,470,956 samples, 2.01%)</title><rect x="55.9020%" y="565" width="2.0132%" height="15" fill="rgb(209,67,49)" fg:x="1762401912" fg:w="63470956"/><text x="56.1520%" y="575.50">h..</text></g><g><title>&lt;[hashbrown::control::tag::Tag] as hashbrown::control::tag::TagSliceExt&gt;::fill_tag (63,470,956 samples, 2.01%)</title><rect x="55.9020%" y="549" width="2.0132%" height="15" fill="rgb(213,87,29)" fg:x="1762401912" fg:w="63470956"/><text x="56.1520%" y="559.50">&lt;..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (63,470,956 samples, 2.01%)</title><rect x="55.9020%" y="533" width="2.0132%" height="15" fill="rgb(205,151,52)" fg:x="1762401912" fg:w="63470956"/><text x="56.1520%" y="543.50">c..</text></g><g><title>core::ptr::write_bytes (63,470,956 samples, 2.01%)</title><rect x="55.9020%" y="517" width="2.0132%" height="15" fill="rgb(253,215,39)" fg:x="1762401912" fg:w="63470956"/><text x="56.1520%" y="527.50">c..</text></g><g><title>[libc.so.6] (63,470,956 samples, 2.01%)</title><rect x="55.9020%" y="501" width="2.0132%" height="15" fill="rgb(221,220,41)" fg:x="1762401912" fg:w="63470956"/><text x="56.1520%" y="511.50">[..</text></g><g><title>[libc.so.6] (63,470,955 samples, 2.01%)</title><rect x="55.9020%" y="485" width="2.0132%" height="15" fill="rgb(218,133,21)" fg:x="1762401913" fg:w="63470955"/><text x="56.1520%" y="495.50">[..</text></g><g><title>[unknown] (63,470,955 samples, 2.01%)</title><rect x="55.9020%" y="469" width="2.0132%" height="15" fill="rgb(221,193,43)" fg:x="1762401913" fg:w="63470955"/><text x="56.1520%" y="479.50">[..</text></g><g><title>[unknown] (2,745,680 samples, 0.09%)</title><rect x="57.8282%" y="453" width="0.0871%" height="15" fill="rgb(240,128,52)" fg:x="1823127188" fg:w="2745680"/><text x="58.0782%" y="463.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (2,740,299 samples, 0.09%)</title><rect x="57.9153%" y="549" width="0.0869%" height="15" fill="rgb(253,114,12)" fg:x="1825872868" fg:w="2740299"/><text x="58.1653%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (2,740,299 samples, 0.09%)</title><rect x="57.9153%" y="533" width="0.0869%" height="15" fill="rgb(215,223,47)" fg:x="1825872868" fg:w="2740299"/><text x="58.1653%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (2,740,299 samples, 0.09%)</title><rect x="57.9153%" y="517" width="0.0869%" height="15" fill="rgb(248,225,23)" fg:x="1825872868" fg:w="2740299"/><text x="58.1653%" y="527.50"></text></g><g><title>[unknown] (5,529,284 samples, 0.18%)</title><rect x="58.5230%" y="405" width="0.1754%" height="15" fill="rgb(250,108,0)" fg:x="1845033914" fg:w="5529284"/><text x="58.7730%" y="415.50"></text></g><g><title>[unknown] (5,529,284 samples, 0.18%)</title><rect x="58.5230%" y="389" width="0.1754%" height="15" fill="rgb(228,208,7)" fg:x="1845033914" fg:w="5529284"/><text x="58.7730%" y="399.50"></text></g><g><title>[unknown] (5,529,284 samples, 0.18%)</title><rect x="58.5230%" y="373" width="0.1754%" height="15" fill="rgb(244,45,10)" fg:x="1845033914" fg:w="5529284"/><text x="58.7730%" y="383.50"></text></g><g><title>[unknown] (5,529,284 samples, 0.18%)</title><rect x="58.5230%" y="357" width="0.1754%" height="15" fill="rgb(207,125,25)" fg:x="1845033914" fg:w="5529284"/><text x="58.7730%" y="367.50"></text></g><g><title>[unknown] (5,529,284 samples, 0.18%)</title><rect x="58.5230%" y="341" width="0.1754%" height="15" fill="rgb(210,195,18)" fg:x="1845033914" fg:w="5529284"/><text x="58.7730%" y="351.50"></text></g><g><title>[unknown] (5,529,284 samples, 0.18%)</title><rect x="58.5230%" y="325" width="0.1754%" height="15" fill="rgb(249,80,12)" fg:x="1845033914" fg:w="5529284"/><text x="58.7730%" y="335.50"></text></g><g><title>[unknown] (2,762,577 samples, 0.09%)</title><rect x="58.6108%" y="309" width="0.0876%" height="15" fill="rgb(221,65,9)" fg:x="1847800621" fg:w="2762577"/><text x="58.8608%" y="319.50"></text></g><g><title>[unknown] (2,762,577 samples, 0.09%)</title><rect x="58.6108%" y="293" width="0.0876%" height="15" fill="rgb(235,49,36)" fg:x="1847800621" fg:w="2762577"/><text x="58.8608%" y="303.50"></text></g><g><title>[unknown] (2,762,577 samples, 0.09%)</title><rect x="58.6108%" y="277" width="0.0876%" height="15" fill="rgb(225,32,20)" fg:x="1847800621" fg:w="2762577"/><text x="58.8608%" y="287.50"></text></g><g><title>[libc.so.6] (19,261,878 samples, 0.61%)</title><rect x="58.5230%" y="421" width="0.6110%" height="15" fill="rgb(215,141,46)" fg:x="1845033914" fg:w="19261878"/><text x="58.7730%" y="431.50"></text></g><g><title>__default_morecore (13,732,594 samples, 0.44%)</title><rect x="58.6984%" y="405" width="0.4356%" height="15" fill="rgb(250,160,47)" fg:x="1850563198" fg:w="13732594"/><text x="58.9484%" y="415.50"></text></g><g><title>__sbrk (13,732,594 samples, 0.44%)</title><rect x="58.6984%" y="389" width="0.4356%" height="15" fill="rgb(216,222,40)" fg:x="1850563198" fg:w="13732594"/><text x="58.9484%" y="399.50"></text></g><g><title>brk (13,732,594 samples, 0.44%)</title><rect x="58.6984%" y="373" width="0.4356%" height="15" fill="rgb(234,217,39)" fg:x="1850563198" fg:w="13732594"/><text x="58.9484%" y="383.50"></text></g><g><title>[unknown] (13,732,594 samples, 0.44%)</title><rect x="58.6984%" y="357" width="0.4356%" height="15" fill="rgb(207,178,40)" fg:x="1850563198" fg:w="13732594"/><text x="58.9484%" y="367.50"></text></g><g><title>[unknown] (13,732,594 samples, 0.44%)</title><rect x="58.6984%" y="341" width="0.4356%" height="15" fill="rgb(221,136,13)" fg:x="1850563198" fg:w="13732594"/><text x="58.9484%" y="351.50"></text></g><g><title>[unknown] (13,732,594 samples, 0.44%)</title><rect x="58.6984%" y="325" width="0.4356%" height="15" fill="rgb(249,199,10)" fg:x="1850563198" fg:w="13732594"/><text x="58.9484%" y="335.50"></text></g><g><title>[unknown] (13,732,594 samples, 0.44%)</title><rect x="58.6984%" y="309" width="0.4356%" height="15" fill="rgb(249,222,13)" fg:x="1850563198" fg:w="13732594"/><text x="58.9484%" y="319.50"></text></g><g><title>[unknown] (8,269,259 samples, 0.26%)</title><rect x="58.8717%" y="293" width="0.2623%" height="15" fill="rgb(244,185,38)" fg:x="1856026533" fg:w="8269259"/><text x="59.1217%" y="303.50"></text></g><g><title>[unknown] (2,733,551 samples, 0.09%)</title><rect x="59.0473%" y="277" width="0.0867%" height="15" fill="rgb(236,202,9)" fg:x="1861562241" fg:w="2733551"/><text x="59.2973%" y="287.50"></text></g><g><title>[unknown] (2,733,551 samples, 0.09%)</title><rect x="59.0473%" y="261" width="0.0867%" height="15" fill="rgb(250,229,37)" fg:x="1861562241" fg:w="2733551"/><text x="59.2973%" y="271.50"></text></g><g><title>[unknown] (2,733,551 samples, 0.09%)</title><rect x="59.0473%" y="245" width="0.0867%" height="15" fill="rgb(206,174,23)" fg:x="1861562241" fg:w="2733551"/><text x="59.2973%" y="255.50"></text></g><g><title>[libc.so.6] (659,287,705 samples, 20.91%)</title><rect x="58.0022%" y="453" width="20.9121%" height="15" fill="rgb(211,33,43)" fg:x="1828613167" fg:w="659287705"/><text x="58.2522%" y="463.50">[libc.so.6]</text></g><g><title>[libc.so.6] (656,550,130 samples, 20.83%)</title><rect x="58.0890%" y="437" width="20.8253%" height="15" fill="rgb(245,58,50)" fg:x="1831350742" fg:w="656550130"/><text x="58.3390%" y="447.50">[libc.so.6]</text></g><g><title>[unknown] (623,605,080 samples, 19.78%)</title><rect x="59.1340%" y="421" width="19.7803%" height="15" fill="rgb(244,68,36)" fg:x="1864295792" fg:w="623605080"/><text x="59.3840%" y="431.50">[unknown]</text></g><g><title>[unknown] (565,939,941 samples, 17.95%)</title><rect x="60.9631%" y="405" width="17.9512%" height="15" fill="rgb(232,229,15)" fg:x="1921960931" fg:w="565939941"/><text x="61.2131%" y="415.50">[unknown]</text></g><g><title>[unknown] (530,176,882 samples, 16.82%)</title><rect x="62.0975%" y="389" width="16.8168%" height="15" fill="rgb(254,30,23)" fg:x="1957723990" fg:w="530176882"/><text x="62.3475%" y="399.50">[unknown]</text></g><g><title>[unknown] (510,943,049 samples, 16.21%)</title><rect x="62.7076%" y="373" width="16.2067%" height="15" fill="rgb(235,160,14)" fg:x="1976957823" fg:w="510943049"/><text x="62.9576%" y="383.50">[unknown]</text></g><g><title>[unknown] (478,024,062 samples, 15.16%)</title><rect x="63.7517%" y="357" width="15.1626%" height="15" fill="rgb(212,155,44)" fg:x="2009876810" fg:w="478024062"/><text x="64.0017%" y="367.50">[unknown]</text></g><g><title>[unknown] (382,760,491 samples, 12.14%)</title><rect x="66.7734%" y="341" width="12.1409%" height="15" fill="rgb(226,2,50)" fg:x="2105140381" fg:w="382760491"/><text x="67.0234%" y="351.50">[unknown]</text></g><g><title>[unknown] (327,265,513 samples, 10.38%)</title><rect x="68.5337%" y="325" width="10.3806%" height="15" fill="rgb(234,177,6)" fg:x="2160635359" fg:w="327265513"/><text x="68.7837%" y="335.50">[unknown]</text></g><g><title>[unknown] (255,350,287 samples, 8.10%)</title><rect x="70.8148%" y="309" width="8.0995%" height="15" fill="rgb(217,24,9)" fg:x="2232550585" fg:w="255350287"/><text x="71.0648%" y="319.50">[unknown]</text></g><g><title>[unknown] (175,494,768 samples, 5.57%)</title><rect x="73.3477%" y="293" width="5.5666%" height="15" fill="rgb(220,13,46)" fg:x="2312406104" fg:w="175494768"/><text x="73.5977%" y="303.50">[unknow..</text></g><g><title>[unknown] (134,350,382 samples, 4.26%)</title><rect x="74.6528%" y="277" width="4.2615%" height="15" fill="rgb(239,221,27)" fg:x="2353550490" fg:w="134350382"/><text x="74.9028%" y="287.50">[unkn..</text></g><g><title>[unknown] (126,064,459 samples, 4.00%)</title><rect x="74.9156%" y="261" width="3.9987%" height="15" fill="rgb(222,198,25)" fg:x="2361836413" fg:w="126064459"/><text x="75.1656%" y="271.50">[unk..</text></g><g><title>[unknown] (117,802,560 samples, 3.74%)</title><rect x="75.1777%" y="245" width="3.7366%" height="15" fill="rgb(211,99,13)" fg:x="2370098312" fg:w="117802560"/><text x="75.4277%" y="255.50">[unk..</text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (667,477,857 samples, 21.17%)</title><rect x="57.9153%" y="565" width="21.1719%" height="15" fill="rgb(232,111,31)" fg:x="1825872868" fg:w="667477857"/><text x="58.1653%" y="575.50">hashbrown::raw::RawTableInner::ne..</text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (664,737,558 samples, 21.08%)</title><rect x="58.0022%" y="549" width="21.0850%" height="15" fill="rgb(245,82,37)" fg:x="1828613167" fg:w="664737558"/><text x="58.2522%" y="559.50">hashbrown::raw::alloc::inner::do_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (664,737,558 samples, 21.08%)</title><rect x="58.0022%" y="533" width="21.0850%" height="15" fill="rgb(227,149,46)" fg:x="1828613167" fg:w="664737558"/><text x="58.2522%" y="543.50">&lt;alloc::alloc::Global as core::al..</text></g><g><title>alloc::alloc::Global::alloc_impl (664,737,558 samples, 21.08%)</title><rect x="58.0022%" y="517" width="21.0850%" height="15" fill="rgb(218,36,50)" fg:x="1828613167" fg:w="664737558"/><text x="58.2522%" y="527.50">alloc::alloc::Global::alloc_impl</text></g><g><title>alloc::alloc::alloc (664,737,558 samples, 21.08%)</title><rect x="58.0022%" y="501" width="21.0850%" height="15" fill="rgb(226,80,48)" fg:x="1828613167" fg:w="664737558"/><text x="58.2522%" y="511.50">alloc::alloc::alloc</text></g><g><title>__rustc::__rdl_alloc (664,737,558 samples, 21.08%)</title><rect x="58.0022%" y="485" width="21.0850%" height="15" fill="rgb(238,224,15)" fg:x="1828613167" fg:w="664737558"/><text x="58.2522%" y="495.50">__rustc::__rdl_alloc</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (664,737,558 samples, 21.08%)</title><rect x="58.0022%" y="469" width="21.0850%" height="15" fill="rgb(241,136,10)" fg:x="1828613167" fg:w="664737558"/><text x="58.2522%" y="479.50">std::sys::alloc::unix::&lt;impl core..</text></g><g><title>malloc (5,449,853 samples, 0.17%)</title><rect x="78.9143%" y="453" width="0.1729%" height="15" fill="rgb(208,32,45)" fg:x="2487900872" fg:w="5449853"/><text x="79.1643%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (733,713,265 samples, 23.27%)</title><rect x="55.9020%" y="613" width="23.2728%" height="15" fill="rgb(207,135,9)" fg:x="1762401912" fg:w="733713265"/><text x="56.1520%" y="623.50">hashbrown::raw::RawTableInner::resize..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (733,713,265 samples, 23.27%)</title><rect x="55.9020%" y="597" width="23.2728%" height="15" fill="rgb(206,86,44)" fg:x="1762401912" fg:w="733713265"/><text x="56.1520%" y="607.50">hashbrown::raw::RawTableInner::prepar..</text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (733,713,265 samples, 23.27%)</title><rect x="55.9020%" y="581" width="23.2728%" height="15" fill="rgb(245,177,15)" fg:x="1762401912" fg:w="733713265"/><text x="56.1520%" y="591.50">hashbrown::raw::RawTableInner::fallib..</text></g><g><title>hashbrown::raw::capacity_to_buckets (2,764,452 samples, 0.09%)</title><rect x="79.0872%" y="565" width="0.0877%" height="15" fill="rgb(206,64,50)" fg:x="2493350725" fg:w="2764452"/><text x="79.3372%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (739,200,495 samples, 23.45%)</title><rect x="55.9020%" y="645" width="23.4469%" height="15" fill="rgb(234,36,40)" fg:x="1762401912" fg:w="739200495"/><text x="56.1520%" y="655.50">hashbrown::raw::RawTable&lt;T,A&gt;::reserv..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (739,200,495 samples, 23.45%)</title><rect x="55.9020%" y="629" width="23.4469%" height="15" fill="rgb(213,64,8)" fg:x="1762401912" fg:w="739200495"/><text x="56.1520%" y="639.50">hashbrown::raw::RawTableInner::reserv..</text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (5,487,230 samples, 0.17%)</title><rect x="79.1748%" y="613" width="0.1741%" height="15" fill="rgb(210,75,36)" fg:x="2496115177" fg:w="5487230"/><text x="79.4248%" y="623.50"></text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (11,007,408 samples, 0.35%)</title><rect x="82.5669%" y="421" width="0.3491%" height="15" fill="rgb(229,88,21)" fg:x="2603056326" fg:w="11007408"/><text x="82.8169%" y="431.50"></text></g><g><title>kukka::delimited::{{closure}} (11,007,408 samples, 0.35%)</title><rect x="82.5669%" y="405" width="0.3491%" height="15" fill="rgb(252,204,47)" fg:x="2603056326" fg:w="11007408"/><text x="82.8169%" y="415.50"></text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (11,007,408 samples, 0.35%)</title><rect x="82.5669%" y="389" width="0.3491%" height="15" fill="rgb(208,77,27)" fg:x="2603056326" fg:w="11007408"/><text x="82.8169%" y="399.50"></text></g><g><title>kukka::multispace0::{{closure}} (11,007,408 samples, 0.35%)</title><rect x="82.5669%" y="373" width="0.3491%" height="15" fill="rgb(221,76,26)" fg:x="2603056326" fg:w="11007408"/><text x="82.8169%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (2,768,592 samples, 0.09%)</title><rect x="82.8283%" y="357" width="0.0878%" height="15" fill="rgb(225,139,18)" fg:x="2611295142" fg:w="2768592"/><text x="83.0783%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (2,768,592 samples, 0.09%)</title><rect x="82.8283%" y="341" width="0.0878%" height="15" fill="rgb(230,137,11)" fg:x="2611295142" fg:w="2768592"/><text x="83.0783%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (2,768,592 samples, 0.09%)</title><rect x="82.8283%" y="325" width="0.0878%" height="15" fill="rgb(212,28,1)" fg:x="2611295142" fg:w="2768592"/><text x="83.0783%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (2,768,592 samples, 0.09%)</title><rect x="82.8283%" y="309" width="0.0878%" height="15" fill="rgb(248,164,17)" fg:x="2611295142" fg:w="2768592"/><text x="83.0783%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16,462,929 samples, 0.52%)</title><rect x="82.9161%" y="421" width="0.5222%" height="15" fill="rgb(222,171,42)" fg:x="2614063734" fg:w="16462929"/><text x="83.1661%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (16,462,929 samples, 0.52%)</title><rect x="82.9161%" y="405" width="0.5222%" height="15" fill="rgb(243,84,45)" fg:x="2614063734" fg:w="16462929"/><text x="83.1661%" y="415.50"></text></g><g><title>core::ptr::write (16,462,929 samples, 0.52%)</title><rect x="82.9161%" y="389" width="0.5222%" height="15" fill="rgb(252,49,23)" fg:x="2614063734" fg:w="16462929"/><text x="83.1661%" y="399.50"></text></g><g><title>[unknown] (8,204,985 samples, 0.26%)</title><rect x="83.1780%" y="373" width="0.2603%" height="15" fill="rgb(215,19,7)" fg:x="2622321678" fg:w="8204985"/><text x="83.4280%" y="383.50"></text></g><g><title>[unknown] (5,457,617 samples, 0.17%)</title><rect x="83.2652%" y="357" width="0.1731%" height="15" fill="rgb(238,81,41)" fg:x="2625069046" fg:w="5457617"/><text x="83.5152%" y="367.50"></text></g><g><title>[unknown] (5,457,617 samples, 0.17%)</title><rect x="83.2652%" y="341" width="0.1731%" height="15" fill="rgb(210,199,37)" fg:x="2625069046" fg:w="5457617"/><text x="83.5152%" y="351.50"></text></g><g><title>[unknown] (5,457,617 samples, 0.17%)</title><rect x="83.2652%" y="325" width="0.1731%" height="15" fill="rgb(244,192,49)" fg:x="2625069046" fg:w="5457617"/><text x="83.5152%" y="335.50"></text></g><g><title>[unknown] (5,457,617 samples, 0.17%)</title><rect x="83.2652%" y="309" width="0.1731%" height="15" fill="rgb(226,211,11)" fg:x="2625069046" fg:w="5457617"/><text x="83.5152%" y="319.50"></text></g><g><title>[unknown] (5,457,617 samples, 0.17%)</title><rect x="83.2652%" y="293" width="0.1731%" height="15" fill="rgb(236,162,54)" fg:x="2625069046" fg:w="5457617"/><text x="83.5152%" y="303.50"></text></g><g><title>[unknown] (5,457,617 samples, 0.17%)</title><rect x="83.2652%" y="277" width="0.1731%" height="15" fill="rgb(220,229,9)" fg:x="2625069046" fg:w="5457617"/><text x="83.5152%" y="287.50"></text></g><g><title>[unknown] (5,457,617 samples, 0.17%)</title><rect x="83.2652%" y="261" width="0.1731%" height="15" fill="rgb(250,87,22)" fg:x="2625069046" fg:w="5457617"/><text x="83.5152%" y="271.50"></text></g><g><title>[libc.so.6] (11,157,910 samples, 0.35%)</title><rect x="84.2732%" y="229" width="0.3539%" height="15" fill="rgb(239,43,17)" fg:x="2656849482" fg:w="11157910"/><text x="84.5232%" y="239.50"></text></g><g><title>__default_morecore (8,264,209 samples, 0.26%)</title><rect x="84.3650%" y="213" width="0.2621%" height="15" fill="rgb(231,177,25)" fg:x="2659743183" fg:w="8264209"/><text x="84.6150%" y="223.50"></text></g><g><title>__sbrk (8,264,209 samples, 0.26%)</title><rect x="84.3650%" y="197" width="0.2621%" height="15" fill="rgb(219,179,1)" fg:x="2659743183" fg:w="8264209"/><text x="84.6150%" y="207.50"></text></g><g><title>brk (8,264,209 samples, 0.26%)</title><rect x="84.3650%" y="181" width="0.2621%" height="15" fill="rgb(238,219,53)" fg:x="2659743183" fg:w="8264209"/><text x="84.6150%" y="191.50"></text></g><g><title>[unknown] (8,264,209 samples, 0.26%)</title><rect x="84.3650%" y="165" width="0.2621%" height="15" fill="rgb(232,167,36)" fg:x="2659743183" fg:w="8264209"/><text x="84.6150%" y="175.50"></text></g><g><title>[unknown] (8,264,209 samples, 0.26%)</title><rect x="84.3650%" y="149" width="0.2621%" height="15" fill="rgb(244,19,51)" fg:x="2659743183" fg:w="8264209"/><text x="84.6150%" y="159.50"></text></g><g><title>[unknown] (8,264,209 samples, 0.26%)</title><rect x="84.3650%" y="133" width="0.2621%" height="15" fill="rgb(224,6,22)" fg:x="2659743183" fg:w="8264209"/><text x="84.6150%" y="143.50"></text></g><g><title>[unknown] (8,264,209 samples, 0.26%)</title><rect x="84.3650%" y="117" width="0.2621%" height="15" fill="rgb(224,145,5)" fg:x="2659743183" fg:w="8264209"/><text x="84.6150%" y="127.50"></text></g><g><title>[unknown] (5,512,070 samples, 0.17%)</title><rect x="84.4523%" y="101" width="0.1748%" height="15" fill="rgb(234,130,49)" fg:x="2662495322" fg:w="5512070"/><text x="84.7023%" y="111.50"></text></g><g><title>[unknown] (5,512,070 samples, 0.17%)</title><rect x="84.4523%" y="85" width="0.1748%" height="15" fill="rgb(254,6,2)" fg:x="2662495322" fg:w="5512070"/><text x="84.7023%" y="95.50"></text></g><g><title>[unknown] (5,512,070 samples, 0.17%)</title><rect x="84.4523%" y="69" width="0.1748%" height="15" fill="rgb(208,96,46)" fg:x="2662495322" fg:w="5512070"/><text x="84.7023%" y="79.50"></text></g><g><title>[unknown] (5,512,070 samples, 0.17%)</title><rect x="84.4523%" y="53" width="0.1748%" height="15" fill="rgb(239,3,39)" fg:x="2662495322" fg:w="5512070"/><text x="84.7023%" y="63.50"></text></g><g><title>[unknown] (2,740,538 samples, 0.09%)</title><rect x="84.5402%" y="37" width="0.0869%" height="15" fill="rgb(233,210,1)" fg:x="2665266854" fg:w="2740538"/><text x="84.7902%" y="47.50"></text></g><g><title>[libc.so.6] (316,729,744 samples, 10.05%)</title><rect x="83.4383%" y="261" width="10.0464%" height="15" fill="rgb(244,137,37)" fg:x="2630526663" fg:w="316729744"/><text x="83.6883%" y="271.50">[libc.so.6]</text></g><g><title>[libc.so.6] (311,206,083 samples, 9.87%)</title><rect x="83.6135%" y="245" width="9.8712%" height="15" fill="rgb(240,136,2)" fg:x="2636050324" fg:w="311206083"/><text x="83.8635%" y="255.50">[libc.so.6]</text></g><g><title>[unknown] (279,249,015 samples, 8.86%)</title><rect x="84.6271%" y="229" width="8.8576%" height="15" fill="rgb(239,18,37)" fg:x="2668007392" fg:w="279249015"/><text x="84.8771%" y="239.50">[unknown]</text></g><g><title>[unknown] (276,510,032 samples, 8.77%)</title><rect x="84.7140%" y="213" width="8.7707%" height="15" fill="rgb(218,185,22)" fg:x="2670746375" fg:w="276510032"/><text x="84.9640%" y="223.50">[unknown]</text></g><g><title>[unknown] (270,697,670 samples, 8.59%)</title><rect x="84.8984%" y="197" width="8.5863%" height="15" fill="rgb(225,218,4)" fg:x="2676558737" fg:w="270697670"/><text x="85.1484%" y="207.50">[unknown]</text></g><g><title>[unknown] (265,179,887 samples, 8.41%)</title><rect x="85.0734%" y="181" width="8.4113%" height="15" fill="rgb(230,182,32)" fg:x="2682076520" fg:w="265179887"/><text x="85.3234%" y="191.50">[unknown]</text></g><g><title>[unknown] (245,921,510 samples, 7.80%)</title><rect x="85.6843%" y="165" width="7.8004%" height="15" fill="rgb(242,56,43)" fg:x="2701334897" fg:w="245921510"/><text x="85.9343%" y="175.50">[unknown]</text></g><g><title>[unknown] (209,516,831 samples, 6.65%)</title><rect x="86.8390%" y="149" width="6.6457%" height="15" fill="rgb(233,99,24)" fg:x="2737739576" fg:w="209516831"/><text x="87.0890%" y="159.50">[unknown]</text></g><g><title>[unknown] (181,980,549 samples, 5.77%)</title><rect x="87.7124%" y="133" width="5.7723%" height="15" fill="rgb(234,209,42)" fg:x="2765275858" fg:w="181980549"/><text x="87.9624%" y="143.50">[unknow..</text></g><g><title>[unknown] (165,513,017 samples, 5.25%)</title><rect x="88.2347%" y="117" width="5.2499%" height="15" fill="rgb(227,7,12)" fg:x="2781743390" fg:w="165513017"/><text x="88.4847%" y="127.50">[unkno..</text></g><g><title>[unknown] (119,641,091 samples, 3.79%)</title><rect x="89.6898%" y="101" width="3.7949%" height="15" fill="rgb(245,203,43)" fg:x="2827615316" fg:w="119641091"/><text x="89.9398%" y="111.50">[unk..</text></g><g><title>[unknown] (103,167,935 samples, 3.27%)</title><rect x="90.2123%" y="85" width="3.2724%" height="15" fill="rgb(238,205,33)" fg:x="2844088472" fg:w="103167935"/><text x="90.4623%" y="95.50">[un..</text></g><g><title>[unknown] (92,174,707 samples, 2.92%)</title><rect x="90.5610%" y="69" width="2.9237%" height="15" fill="rgb(231,56,7)" fg:x="2855081700" fg:w="92174707"/><text x="90.8110%" y="79.50">[u..</text></g><g><title>[unknown] (74,806,369 samples, 2.37%)</title><rect x="91.1119%" y="53" width="2.3728%" height="15" fill="rgb(244,186,29)" fg:x="2872450038" fg:w="74806369"/><text x="91.3619%" y="63.50">[u..</text></g><g><title>json::parse_array (364,152,430 samples, 11.55%)</title><rect x="82.1082%" y="533" width="11.5506%" height="15" fill="rgb(234,111,31)" fg:x="2588593937" fg:w="364152430"/><text x="82.3582%" y="543.50">json::parse_array</text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (364,152,430 samples, 11.55%)</title><rect x="82.1082%" y="517" width="11.5506%" height="15" fill="rgb(241,149,10)" fg:x="2588593937" fg:w="364152430"/><text x="82.3582%" y="527.50">&lt;F as kukka::Pars..</text></g><g><title>kukka::map::{{closure}} (364,152,430 samples, 11.55%)</title><rect x="82.1082%" y="501" width="11.5506%" height="15" fill="rgb(249,206,44)" fg:x="2588593937" fg:w="364152430"/><text x="82.3582%" y="511.50">kukka::map::{{clo..</text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (364,152,430 samples, 11.55%)</title><rect x="82.1082%" y="485" width="11.5506%" height="15" fill="rgb(251,153,30)" fg:x="2588593937" fg:w="364152430"/><text x="82.3582%" y="495.50">&lt;F as kukka::Pars..</text></g><g><title>kukka::delimited::{{closure}} (364,152,430 samples, 11.55%)</title><rect x="82.1082%" y="469" width="11.5506%" height="15" fill="rgb(239,152,38)" fg:x="2588593937" fg:w="364152430"/><text x="82.3582%" y="479.50">kukka::delimited:..</text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (364,152,430 samples, 11.55%)</title><rect x="82.1082%" y="453" width="11.5506%" height="15" fill="rgb(249,139,47)" fg:x="2588593937" fg:w="364152430"/><text x="82.3582%" y="463.50">&lt;F as kukka::Pars..</text></g><g><title>kukka::separated::{{closure}} (364,152,430 samples, 11.55%)</title><rect x="82.1082%" y="437" width="11.5506%" height="15" fill="rgb(244,64,35)" fg:x="2588593937" fg:w="364152430"/><text x="82.3582%" y="447.50">kukka::separated:..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (322,219,704 samples, 10.22%)</title><rect x="83.4383%" y="421" width="10.2206%" height="15" fill="rgb(216,46,15)" fg:x="2630526663" fg:w="322219704"/><text x="83.6883%" y="431.50">alloc::vec::Vec..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (322,219,704 samples, 10.22%)</title><rect x="83.4383%" y="405" width="10.2206%" height="15" fill="rgb(250,74,19)" fg:x="2630526663" fg:w="322219704"/><text x="83.6883%" y="415.50">alloc::vec::Vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (322,219,704 samples, 10.22%)</title><rect x="83.4383%" y="389" width="10.2206%" height="15" fill="rgb(249,42,33)" fg:x="2630526663" fg:w="322219704"/><text x="83.6883%" y="399.50">alloc::raw_vec:..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (322,219,704 samples, 10.22%)</title><rect x="83.4383%" y="373" width="10.2206%" height="15" fill="rgb(242,149,17)" fg:x="2630526663" fg:w="322219704"/><text x="83.6883%" y="383.50">alloc::raw_vec:..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (322,219,704 samples, 10.22%)</title><rect x="83.4383%" y="357" width="10.2206%" height="15" fill="rgb(244,29,21)" fg:x="2630526663" fg:w="322219704"/><text x="83.6883%" y="367.50">alloc::raw_vec:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (322,219,704 samples, 10.22%)</title><rect x="83.4383%" y="341" width="10.2206%" height="15" fill="rgb(220,130,37)" fg:x="2630526663" fg:w="322219704"/><text x="83.6883%" y="351.50">&lt;alloc::alloc::..</text></g><g><title>alloc::alloc::Global::alloc_impl (322,219,704 samples, 10.22%)</title><rect x="83.4383%" y="325" width="10.2206%" height="15" fill="rgb(211,67,2)" fg:x="2630526663" fg:w="322219704"/><text x="83.6883%" y="335.50">alloc::alloc::G..</text></g><g><title>alloc::alloc::alloc (322,219,704 samples, 10.22%)</title><rect x="83.4383%" y="309" width="10.2206%" height="15" fill="rgb(235,68,52)" fg:x="2630526663" fg:w="322219704"/><text x="83.6883%" y="319.50">alloc::alloc::a..</text></g><g><title>__rustc::__rdl_alloc (322,219,704 samples, 10.22%)</title><rect x="83.4383%" y="293" width="10.2206%" height="15" fill="rgb(246,142,3)" fg:x="2630526663" fg:w="322219704"/><text x="83.6883%" y="303.50">__rustc::__rdl_..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (322,219,704 samples, 10.22%)</title><rect x="83.4383%" y="277" width="10.2206%" height="15" fill="rgb(241,25,7)" fg:x="2630526663" fg:w="322219704"/><text x="83.6883%" y="287.50">std::sys::alloc..</text></g><g><title>malloc (5,489,960 samples, 0.17%)</title><rect x="93.4847%" y="261" width="0.1741%" height="15" fill="rgb(242,119,39)" fg:x="2947256407" fg:w="5489960"/><text x="93.7347%" y="271.50"></text></g><g><title>json::parse_number (90,971,619 samples, 2.89%)</title><rect x="93.6588%" y="533" width="2.8855%" height="15" fill="rgb(241,98,45)" fg:x="2952746367" fg:w="90971619"/><text x="93.9088%" y="543.50">js..</text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (90,971,619 samples, 2.89%)</title><rect x="93.6588%" y="517" width="2.8855%" height="15" fill="rgb(254,28,30)" fg:x="2952746367" fg:w="90971619"/><text x="93.9088%" y="527.50">&lt;F..</text></g><g><title>kukka::map::{{closure}} (90,971,619 samples, 2.89%)</title><rect x="93.6588%" y="501" width="2.8855%" height="15" fill="rgb(241,142,54)" fg:x="2952746367" fg:w="90971619"/><text x="93.9088%" y="511.50">ku..</text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (85,475,798 samples, 2.71%)</title><rect x="93.8332%" y="485" width="2.7112%" height="15" fill="rgb(222,85,15)" fg:x="2958242188" fg:w="85475798"/><text x="94.0832%" y="495.50">&lt;F..</text></g><g><title>kukka::integer::{{closure}} (85,475,798 samples, 2.71%)</title><rect x="93.8332%" y="469" width="2.7112%" height="15" fill="rgb(210,85,47)" fg:x="2958242188" fg:w="85475798"/><text x="94.0832%" y="479.50">ku..</text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (8,189,164 samples, 0.26%)</title><rect x="96.2846%" y="453" width="0.2598%" height="15" fill="rgb(224,206,25)" fg:x="3035528822" fg:w="8189164"/><text x="96.5346%" y="463.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (8,189,164 samples, 0.26%)</title><rect x="96.2846%" y="437" width="0.2598%" height="15" fill="rgb(243,201,19)" fg:x="3035528822" fg:w="8189164"/><text x="96.5346%" y="447.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (8,189,164 samples, 0.26%)</title><rect x="96.2846%" y="421" width="0.2598%" height="15" fill="rgb(236,59,4)" fg:x="3035528822" fg:w="8189164"/><text x="96.5346%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (8,189,164 samples, 0.26%)</title><rect x="96.2846%" y="405" width="0.2598%" height="15" fill="rgb(254,179,45)" fg:x="3035528822" fg:w="8189164"/><text x="96.5346%" y="415.50"></text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (2,757,114 samples, 0.09%)</title><rect x="96.5444%" y="485" width="0.0875%" height="15" fill="rgb(226,14,10)" fg:x="3043717986" fg:w="2757114"/><text x="96.7944%" y="495.50"></text></g><g><title>kukka::delimited::{{closure}} (2,757,114 samples, 0.09%)</title><rect x="96.5444%" y="469" width="0.0875%" height="15" fill="rgb(244,27,41)" fg:x="3043717986" fg:w="2757114"/><text x="96.7944%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2,757,114 samples, 0.09%)</title><rect x="96.5444%" y="453" width="0.0875%" height="15" fill="rgb(235,35,32)" fg:x="3043717986" fg:w="2757114"/><text x="96.7944%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (13,699,046 samples, 0.43%)</title><rect x="96.9783%" y="325" width="0.4345%" height="15" fill="rgb(218,68,31)" fg:x="3057396724" fg:w="13699046"/><text x="97.2283%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (13,699,046 samples, 0.43%)</title><rect x="96.9783%" y="309" width="0.4345%" height="15" fill="rgb(207,120,37)" fg:x="3057396724" fg:w="13699046"/><text x="97.2283%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (10,931,851 samples, 0.35%)</title><rect x="97.0660%" y="293" width="0.3467%" height="15" fill="rgb(227,98,0)" fg:x="3060163919" fg:w="10931851"/><text x="97.3160%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::{{closure}} (2,753,878 samples, 0.09%)</title><rect x="97.3254%" y="277" width="0.0874%" height="15" fill="rgb(207,7,3)" fg:x="3068341892" fg:w="2753878"/><text x="97.5754%" y="287.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2,753,878 samples, 0.09%)</title><rect x="97.3254%" y="261" width="0.0874%" height="15" fill="rgb(206,98,19)" fg:x="3068341892" fg:w="2753878"/><text x="97.5754%" y="271.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2,753,878 samples, 0.09%)</title><rect x="97.3254%" y="245" width="0.0874%" height="15" fill="rgb(217,5,26)" fg:x="3068341892" fg:w="2753878"/><text x="97.5754%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,753,878 samples, 0.09%)</title><rect x="97.3254%" y="229" width="0.0874%" height="15" fill="rgb(235,190,38)" fg:x="3068341892" fg:w="2753878"/><text x="97.5754%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,753,878 samples, 0.09%)</title><rect x="97.3254%" y="213" width="0.0874%" height="15" fill="rgb(247,86,24)" fg:x="3068341892" fg:w="2753878"/><text x="97.5754%" y="223.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2,753,878 samples, 0.09%)</title><rect x="97.3254%" y="197" width="0.0874%" height="15" fill="rgb(205,101,16)" fg:x="3068341892" fg:w="2753878"/><text x="97.5754%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,753,878 samples, 0.09%)</title><rect x="97.3254%" y="181" width="0.0874%" height="15" fill="rgb(246,168,33)" fg:x="3068341892" fg:w="2753878"/><text x="97.5754%" y="191.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (2,753,878 samples, 0.09%)</title><rect x="97.3254%" y="165" width="0.0874%" height="15" fill="rgb(231,114,1)" fg:x="3068341892" fg:w="2753878"/><text x="97.5754%" y="175.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,753,878 samples, 0.09%)</title><rect x="97.3254%" y="149" width="0.0874%" height="15" fill="rgb(207,184,53)" fg:x="3068341892" fg:w="2753878"/><text x="97.5754%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (2,764,936 samples, 0.09%)</title><rect x="97.4128%" y="325" width="0.0877%" height="15" fill="rgb(224,95,51)" fg:x="3071095770" fg:w="2764936"/><text x="97.6628%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (19,230,155 samples, 0.61%)</title><rect x="96.9783%" y="373" width="0.6100%" height="15" fill="rgb(212,188,45)" fg:x="3057396724" fg:w="19230155"/><text x="97.2283%" y="383.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (19,230,155 samples, 0.61%)</title><rect x="96.9783%" y="357" width="0.6100%" height="15" fill="rgb(223,154,38)" fg:x="3057396724" fg:w="19230155"/><text x="97.2283%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (19,230,155 samples, 0.61%)</title><rect x="96.9783%" y="341" width="0.6100%" height="15" fill="rgb(251,22,52)" fg:x="3057396724" fg:w="19230155"/><text x="97.2283%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (2,766,173 samples, 0.09%)</title><rect x="97.5005%" y="325" width="0.0877%" height="15" fill="rgb(229,209,22)" fg:x="3073860706" fg:w="2766173"/><text x="97.7505%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (2,766,173 samples, 0.09%)</title><rect x="97.5005%" y="309" width="0.0877%" height="15" fill="rgb(234,138,34)" fg:x="3073860706" fg:w="2766173"/><text x="97.7505%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_hash (2,766,173 samples, 0.09%)</title><rect x="97.5005%" y="293" width="0.0877%" height="15" fill="rgb(212,95,11)" fg:x="3073860706" fg:w="2766173"/><text x="97.7505%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (2,766,173 samples, 0.09%)</title><rect x="97.5005%" y="277" width="0.0877%" height="15" fill="rgb(240,179,47)" fg:x="3073860706" fg:w="2766173"/><text x="97.7505%" y="287.50"></text></g><g><title>json::parse_object (32,908,894 samples, 1.04%)</title><rect x="96.5444%" y="533" width="1.0438%" height="15" fill="rgb(240,163,11)" fg:x="3043717986" fg:w="32908894"/><text x="96.7944%" y="543.50"></text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (32,908,894 samples, 1.04%)</title><rect x="96.5444%" y="517" width="1.0438%" height="15" fill="rgb(236,37,12)" fg:x="3043717986" fg:w="32908894"/><text x="96.7944%" y="527.50"></text></g><g><title>kukka::map::{{closure}} (32,908,894 samples, 1.04%)</title><rect x="96.5444%" y="501" width="1.0438%" height="15" fill="rgb(232,164,16)" fg:x="3043717986" fg:w="32908894"/><text x="96.7944%" y="511.50"></text></g><g><title>json::parse_object::{{closure}} (30,151,780 samples, 0.96%)</title><rect x="96.6318%" y="485" width="0.9564%" height="15" fill="rgb(244,205,15)" fg:x="3046475100" fg:w="30151780"/><text x="96.8818%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (30,151,780 samples, 0.96%)</title><rect x="96.6318%" y="469" width="0.9564%" height="15" fill="rgb(223,117,47)" fg:x="3046475100" fg:w="30151780"/><text x="96.8818%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (30,151,780 samples, 0.96%)</title><rect x="96.6318%" y="453" width="0.9564%" height="15" fill="rgb(244,107,35)" fg:x="3046475100" fg:w="30151780"/><text x="96.8818%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (30,151,780 samples, 0.96%)</title><rect x="96.6318%" y="437" width="0.9564%" height="15" fill="rgb(205,140,8)" fg:x="3046475100" fg:w="30151780"/><text x="96.8818%" y="447.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (30,151,780 samples, 0.96%)</title><rect x="96.6318%" y="421" width="0.9564%" height="15" fill="rgb(228,84,46)" fg:x="3046475100" fg:w="30151780"/><text x="96.8818%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (30,151,780 samples, 0.96%)</title><rect x="96.6318%" y="405" width="0.9564%" height="15" fill="rgb(254,188,9)" fg:x="3046475100" fg:w="30151780"/><text x="96.8818%" y="415.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (30,151,780 samples, 0.96%)</title><rect x="96.6318%" y="389" width="0.9564%" height="15" fill="rgb(206,112,54)" fg:x="3046475100" fg:w="30151780"/><text x="96.8818%" y="399.50"></text></g><g><title>json::parse_json::{{closure}} (562,525,266 samples, 17.84%)</title><rect x="80.2202%" y="581" width="17.8429%" height="15" fill="rgb(216,84,49)" fg:x="2529071386" fg:w="562525266"/><text x="80.4702%" y="591.50">json::parse_json::{{closure}}</text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (503,002,715 samples, 15.95%)</title><rect x="82.1082%" y="565" width="15.9549%" height="15" fill="rgb(214,194,35)" fg:x="2588593937" fg:w="503002715"/><text x="82.3582%" y="575.50">&lt;F as kukka::Parser&lt;Out&gt;&gt;..</text></g><g><title>core::ops::function::Fn::call (503,002,715 samples, 15.95%)</title><rect x="82.1082%" y="549" width="15.9549%" height="15" fill="rgb(249,28,3)" fg:x="2588593937" fg:w="503002715"/><text x="82.3582%" y="559.50">core::ops::function::Fn::..</text></g><g><title>json::parse_string (14,969,772 samples, 0.47%)</title><rect x="97.5882%" y="533" width="0.4748%" height="15" fill="rgb(222,56,52)" fg:x="3076626880" fg:w="14969772"/><text x="97.8382%" y="543.50"></text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (14,969,772 samples, 0.47%)</title><rect x="97.5882%" y="517" width="0.4748%" height="15" fill="rgb(245,217,50)" fg:x="3076626880" fg:w="14969772"/><text x="97.8382%" y="527.50"></text></g><g><title>kukka::map::{{closure}} (14,969,772 samples, 0.47%)</title><rect x="97.5882%" y="501" width="0.4748%" height="15" fill="rgb(213,201,24)" fg:x="3076626880" fg:w="14969772"/><text x="97.8382%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (12,205,146 samples, 0.39%)</title><rect x="97.6759%" y="485" width="0.3871%" height="15" fill="rgb(248,116,28)" fg:x="3079391506" fg:w="12205146"/><text x="97.9259%" y="495.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (4,770,117 samples, 0.15%)</title><rect x="99.5874%" y="517" width="0.1513%" height="15" fill="rgb(219,72,43)" fg:x="3139655589" fg:w="4770117"/><text x="99.8374%" y="527.50"></text></g><g><title>all (3,152,662,097 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(209,138,14)" fg:x="0" fg:w="3152662097"/><text x="0.2500%" y="687.50"></text></g><g><title>json (3,152,662,097 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(222,18,33)" fg:x="0" fg:w="3152662097"/><text x="0.2500%" y="671.50">json</text></g><g><title>json::parse_json (651,059,690 samples, 20.65%)</title><rect x="79.3489%" y="645" width="20.6511%" height="15" fill="rgb(213,199,7)" fg:x="2501602407" fg:w="651059690"/><text x="79.5989%" y="655.50">json::parse_json</text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (634,615,185 samples, 20.13%)</title><rect x="79.8705%" y="629" width="20.1295%" height="15" fill="rgb(250,110,10)" fg:x="2518046912" fg:w="634615185"/><text x="80.1205%" y="639.50">&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse</text></g><g><title>kukka::delimited::{{closure}} (634,615,185 samples, 20.13%)</title><rect x="79.8705%" y="613" width="20.1295%" height="15" fill="rgb(248,123,6)" fg:x="2518046912" fg:w="634615185"/><text x="80.1205%" y="623.50">kukka::delimited::{{closure}}</text></g><g><title>&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse (623,590,711 samples, 19.78%)</title><rect x="80.2202%" y="597" width="19.7798%" height="15" fill="rgb(206,91,31)" fg:x="2529071386" fg:w="623590711"/><text x="80.4702%" y="607.50">&lt;F as kukka::Parser&lt;Out&gt;&gt;::parse</text></g><g><title>kukka::multispace0::{{closure}} (61,065,445 samples, 1.94%)</title><rect x="98.0631%" y="581" width="1.9369%" height="15" fill="rgb(211,154,13)" fg:x="3091596652" fg:w="61065445"/><text x="98.3131%" y="591.50">k..</text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (13,006,508 samples, 0.41%)</title><rect x="99.5874%" y="565" width="0.4126%" height="15" fill="rgb(225,148,7)" fg:x="3139655589" fg:w="13006508"/><text x="99.8374%" y="575.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (13,006,508 samples, 0.41%)</title><rect x="99.5874%" y="549" width="0.4126%" height="15" fill="rgb(220,160,43)" fg:x="3139655589" fg:w="13006508"/><text x="99.8374%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (13,006,508 samples, 0.41%)</title><rect x="99.5874%" y="533" width="0.4126%" height="15" fill="rgb(213,52,39)" fg:x="3139655589" fg:w="13006508"/><text x="99.8374%" y="543.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (8,236,391 samples, 0.26%)</title><rect x="99.7387%" y="517" width="0.2613%" height="15" fill="rgb(243,137,7)" fg:x="3144425706" fg:w="8236391"/><text x="99.9887%" y="527.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (8,236,391 samples, 0.26%)</title><rect x="99.7387%" y="501" width="0.2613%" height="15" fill="rgb(230,79,13)" fg:x="3144425706" fg:w="8236391"/><text x="99.9887%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (8,236,391 samples, 0.26%)</title><rect x="99.7387%" y="485" width="0.2613%" height="15" fill="rgb(247,105,23)" fg:x="3144425706" fg:w="8236391"/><text x="99.9887%" y="495.50"></text></g></svg></svg>